
liife.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fc8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006328  08006328  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08006328  08006328  00016328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006330  08006330  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006330  08006330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006334  08006334  00016334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  080063a8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  08006448  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008910  200001b0  080064e8  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008ac0  080064e8  00028ac0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017604  00000000  00000000  000201de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e0a  00000000  00000000  000377e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001208  00000000  00000000  0003a5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000010d0  00000000  00000000  0003b7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a60b  00000000  00000000  0003c8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001602a  00000000  00000000  00066ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fd9a8  00000000  00000000  0007cefd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0017a8a5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000055bc  00000000  00000000  0017a8f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .stab         00000024  00000000  00000000  0017feb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      0000004e  00000000  00000000  0017fed8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b0 	.word	0x200001b0
 800021c:	00000000 	.word	0x00000000
 8000220:	080061b0 	.word	0x080061b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b4 	.word	0x200001b4
 800023c:	080061b0 	.word	0x080061b0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fd65 	bl	80010b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f81c 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f978 	bl	80008e4 <MX_GPIO_Init>
  MX_ETH_Init();
 80005f4:	f000 f88a 	bl	800070c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f8:	f000 f916 	bl	8000828 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005fc:	f000 f944 	bl	8000888 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000600:	f000 f8d2 	bl	80007a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000604:	f004 fbcc 	bl	8004da0 <ssd1306_Init>
  ssd1306_Fill(White);
 8000608:	2001      	movs	r0, #1
 800060a:	f004 fc33 	bl	8004e74 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 800060e:	f004 fc55 	bl	8004ebc <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 8000612:	f004 fa25 	bl	8004a60 <init>
  show();
 8000616:	f004 fa59 	bl	8004acc <show>
  while (1)
  {
    /* USER CODE END WHILE */
	  update_generation();
 800061a:	f004 fb59 	bl	8004cd0 <update_generation>
	  show();
 800061e:	f004 fa55 	bl	8004acc <show>
	  ssd1306_UpdateScreen();
 8000622:	f004 fc4b 	bl	8004ebc <ssd1306_UpdateScreen>
	  update_generation();
 8000626:	e7f8      	b.n	800061a <main+0x36>

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2234      	movs	r2, #52	; 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 fd18 	bl	800506c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800064c:	f002 f950 	bl	80028f0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	4b2c      	ldr	r3, [pc, #176]	; (8000704 <SystemClock_Config+0xdc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a2b      	ldr	r2, [pc, #172]	; (8000704 <SystemClock_Config+0xdc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b29      	ldr	r3, [pc, #164]	; (8000704 <SystemClock_Config+0xdc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	4b27      	ldr	r3, [pc, #156]	; (8000708 <SystemClock_Config+0xe0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000670:	4a25      	ldr	r2, [pc, #148]	; (8000708 <SystemClock_Config+0xe0>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <SystemClock_Config+0xe0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000688:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800068c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800069c:	2360      	movs	r3, #96	; 0x60
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 f97d 	bl	80029b0 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006bc:	f000 f9b4 	bl	8000a28 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006c0:	f002 f926 	bl	8002910 <HAL_PWREx_EnableOverDrive>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ca:	f000 f9ad 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2103      	movs	r1, #3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fc0e 	bl	8002f0c <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006f6:	f000 f997 	bl	8000a28 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_ETH_Init+0x84>)
 8000712:	4a20      	ldr	r2, [pc, #128]	; (8000794 <MX_ETH_Init+0x88>)
 8000714:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_ETH_Init+0x8c>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_ETH_Init+0x8c>)
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_ETH_Init+0x8c>)
 8000724:	22e1      	movs	r2, #225	; 0xe1
 8000726:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_ETH_Init+0x8c>)
 800072a:	2200      	movs	r2, #0
 800072c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_ETH_Init+0x8c>)
 8000730:	2200      	movs	r2, #0
 8000732:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_ETH_Init+0x8c>)
 8000736:	2200      	movs	r2, #0
 8000738:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_ETH_Init+0x84>)
 800073c:	4a16      	ldr	r2, [pc, #88]	; (8000798 <MX_ETH_Init+0x8c>)
 800073e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_ETH_Init+0x84>)
 8000742:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000746:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_ETH_Init+0x84>)
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <MX_ETH_Init+0x90>)
 800074c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_ETH_Init+0x84>)
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <MX_ETH_Init+0x94>)
 8000752:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_ETH_Init+0x84>)
 8000756:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800075a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_ETH_Init+0x84>)
 800075e:	f000 fe11 	bl	8001384 <HAL_ETH_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000768:	f000 f95e 	bl	8000a28 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800076c:	2238      	movs	r2, #56	; 0x38
 800076e:	2100      	movs	r1, #0
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <MX_ETH_Init+0x98>)
 8000772:	f004 fc7b 	bl	800506c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_ETH_Init+0x98>)
 8000778:	2221      	movs	r2, #33	; 0x21
 800077a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_ETH_Init+0x98>)
 800077e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000782:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_ETH_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000204 	.word	0x20000204
 8000794:	40028000 	.word	0x40028000
 8000798:	20000898 	.word	0x20000898
 800079c:	20000110 	.word	0x20000110
 80007a0:	20000070 	.word	0x20000070
 80007a4:	200001cc 	.word	0x200001cc

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_I2C1_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_I2C1_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_I2C1_Init+0x74>)
 80007b4:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <MX_I2C1_Init+0x7c>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_I2C1_Init+0x74>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_I2C1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e2:	480e      	ldr	r0, [pc, #56]	; (800081c <MX_I2C1_Init+0x74>)
 80007e4:	f001 faba 	bl	8001d5c <HAL_I2C_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ee:	f000 f91b 	bl	8000a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <MX_I2C1_Init+0x74>)
 80007f6:	f001 fe9b 	bl	8002530 <HAL_I2CEx_ConfigAnalogFilter>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000800:	f000 f912 	bl	8000a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_I2C1_Init+0x74>)
 8000808:	f001 fedd 	bl	80025c6 <HAL_I2CEx_ConfigDigitalFilter>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 f909 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200002b4 	.word	0x200002b4
 8000820:	40005400 	.word	0x40005400
 8000824:	20303e5d 	.word	0x20303e5d

08000828 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <MX_USART3_UART_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800086c:	f003 f99c 	bl	8003ba8 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f8d7 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000308 	.word	0x20000308
 8000884:	40004800 	.word	0x40004800

08000888 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000892:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2206      	movs	r2, #6
 8000898:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2202      	movs	r2, #2
 800089e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	f001 fec7 	bl	800265e <HAL_PCD_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 f8a7 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000390 	.word	0x20000390

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b47      	ldr	r3, [pc, #284]	; (8000a18 <MX_GPIO_Init+0x134>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a46      	ldr	r2, [pc, #280]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b44      	ldr	r3, [pc, #272]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	4b41      	ldr	r3, [pc, #260]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a40      	ldr	r2, [pc, #256]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b3e      	ldr	r3, [pc, #248]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b3b      	ldr	r3, [pc, #236]	; (8000a18 <MX_GPIO_Init+0x134>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a3a      	ldr	r2, [pc, #232]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b35      	ldr	r3, [pc, #212]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a34      	ldr	r2, [pc, #208]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b32      	ldr	r3, [pc, #200]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	4b2f      	ldr	r3, [pc, #188]	; (8000a18 <MX_GPIO_Init+0x134>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a2e      	ldr	r2, [pc, #184]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000972:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a28      	ldr	r2, [pc, #160]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <MX_GPIO_Init+0x134>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000990:	4822      	ldr	r0, [pc, #136]	; (8000a1c <MX_GPIO_Init+0x138>)
 8000992:	f001 f9c9 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2140      	movs	r1, #64	; 0x40
 800099a:	4821      	ldr	r0, [pc, #132]	; (8000a20 <MX_GPIO_Init+0x13c>)
 800099c:	f001 f9c4 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	481b      	ldr	r0, [pc, #108]	; (8000a24 <MX_GPIO_Init+0x140>)
 80009b8:	f001 f80a 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4811      	ldr	r0, [pc, #68]	; (8000a1c <MX_GPIO_Init+0x138>)
 80009d6:	f000 fffb 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009da:	2340      	movs	r3, #64	; 0x40
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	480b      	ldr	r0, [pc, #44]	; (8000a20 <MX_GPIO_Init+0x13c>)
 80009f2:	f000 ffed 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_GPIO_Init+0x13c>)
 8000a0a:	f000 ffe1 	bl	80019d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	; 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	40021800 	.word	0x40021800
 8000a24:	40020800 	.word	0x40020800

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_MspInit+0x44>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <HAL_MspInit+0x44>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <HAL_MspInit+0x44>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x44>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x44>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x44>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a4e      	ldr	r2, [pc, #312]	; (8000bd4 <HAL_ETH_MspInit+0x158>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	f040 8096 	bne.w	8000bcc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000aa0:	4b4d      	ldr	r3, [pc, #308]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	4a4c      	ldr	r2, [pc, #304]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000aa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000aac:	4b4a      	ldr	r3, [pc, #296]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab4:	623b      	str	r3, [r7, #32]
 8000ab6:	6a3b      	ldr	r3, [r7, #32]
 8000ab8:	4b47      	ldr	r3, [pc, #284]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4a46      	ldr	r2, [pc, #280]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000abe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac4:	4b44      	ldr	r3, [pc, #272]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000acc:	61fb      	str	r3, [r7, #28]
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	4b41      	ldr	r3, [pc, #260]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a40      	ldr	r2, [pc, #256]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000ad6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b3e      	ldr	r3, [pc, #248]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae8:	4b3b      	ldr	r3, [pc, #236]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	4a3a      	ldr	r2, [pc, #232]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6313      	str	r3, [r2, #48]	; 0x30
 8000af4:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b35      	ldr	r3, [pc, #212]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a34      	ldr	r2, [pc, #208]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	4a2e      	ldr	r2, [pc, #184]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	6313      	str	r3, [r2, #48]	; 0x30
 8000b24:	4b2c      	ldr	r3, [pc, #176]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4a28      	ldr	r2, [pc, #160]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3c:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <HAL_ETH_MspInit+0x15c>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b48:	2332      	movs	r3, #50	; 0x32
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b58:	230b      	movs	r3, #11
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	481e      	ldr	r0, [pc, #120]	; (8000bdc <HAL_ETH_MspInit+0x160>)
 8000b64:	f000 ff34 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b68:	2386      	movs	r3, #134	; 0x86
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b78:	230b      	movs	r3, #11
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	4817      	ldr	r0, [pc, #92]	; (8000be0 <HAL_ETH_MspInit+0x164>)
 8000b84:	f000 ff24 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9a:	230b      	movs	r3, #11
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480f      	ldr	r0, [pc, #60]	; (8000be4 <HAL_ETH_MspInit+0x168>)
 8000ba6:	f000 ff13 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000baa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4808      	ldr	r0, [pc, #32]	; (8000be8 <HAL_ETH_MspInit+0x16c>)
 8000bc8:	f000 ff02 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bcc:	bf00      	nop
 8000bce:	3738      	adds	r7, #56	; 0x38
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40028000 	.word	0x40028000
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020400 	.word	0x40020400
 8000be8:	40021800 	.word	0x40021800

08000bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0ae      	sub	sp, #184	; 0xb8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2290      	movs	r2, #144	; 0x90
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 fa2d 	bl	800506c <memset>
  if(hi2c->Instance==I2C1)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <HAL_I2C_MspInit+0xb4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d13c      	bne.n	8000c96 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 fb94 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c36:	f7ff fef7 	bl	8000a28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <HAL_I2C_MspInit+0xb8>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_I2C_MspInit+0xb8>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_I2C_MspInit+0xb8>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5a:	2312      	movs	r3, #18
 8000c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c76:	4619      	mov	r1, r3
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <HAL_I2C_MspInit+0xbc>)
 8000c7a:	f000 fea9 	bl	80019d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_I2C_MspInit+0xb8>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_I2C_MspInit+0xb8>)
 8000c84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_I2C_MspInit+0xb8>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	37b8      	adds	r7, #184	; 0xb8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020400 	.word	0x40020400

08000cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0ae      	sub	sp, #184	; 0xb8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2290      	movs	r2, #144	; 0x90
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f004 f9cd 	bl	800506c <memset>
  if(huart->Instance==USART3)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a22      	ldr	r2, [pc, #136]	; (8000d60 <HAL_UART_MspInit+0xb4>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d13c      	bne.n	8000d56 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 fb34 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cf6:	f7ff fe97 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <HAL_UART_MspInit+0xb8>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <HAL_UART_MspInit+0xb8>)
 8000d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_UART_MspInit+0xb8>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_UART_MspInit+0xb8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <HAL_UART_MspInit+0xb8>)
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_UART_MspInit+0xb8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d44:	2307      	movs	r3, #7
 8000d46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_UART_MspInit+0xbc>)
 8000d52:	f000 fe3d 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	37b8      	adds	r7, #184	; 0xb8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40004800 	.word	0x40004800
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020c00 	.word	0x40020c00

08000d6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b0ae      	sub	sp, #184	; 0xb8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2290      	movs	r2, #144	; 0x90
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 f96d 	bl	800506c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d9a:	d159      	bne.n	8000e50 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000da0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4618      	mov	r0, r3
 8000dae:	f002 fad3 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000db8:	f7ff fe36 	bl	8000a28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <HAL_PCD_MspInit+0xec>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a25      	ldr	r2, [pc, #148]	; (8000e58 <HAL_PCD_MspInit+0xec>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <HAL_PCD_MspInit+0xec>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dd4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dee:	230a      	movs	r3, #10
 8000df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4818      	ldr	r0, [pc, #96]	; (8000e5c <HAL_PCD_MspInit+0xf0>)
 8000dfc:	f000 fde8 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4810      	ldr	r0, [pc, #64]	; (8000e5c <HAL_PCD_MspInit+0xf0>)
 8000e1c:	f000 fdd8 	bl	80019d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_PCD_MspInit+0xec>)
 8000e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e24:	4a0c      	ldr	r2, [pc, #48]	; (8000e58 <HAL_PCD_MspInit+0xec>)
 8000e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2a:	6353      	str	r3, [r2, #52]	; 0x34
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_PCD_MspInit+0xec>)
 8000e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <HAL_PCD_MspInit+0xec>)
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_PCD_MspInit+0xec>)
 8000e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e42:	6453      	str	r3, [r2, #68]	; 0x44
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <HAL_PCD_MspInit+0xec>)
 8000e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	37b8      	adds	r7, #184	; 0xb8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 f940 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_kill>:

int _kill(int pid, int sig)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ece:	f004 f8a3 	bl	8005018 <__errno>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2216      	movs	r2, #22
 8000ed6:	601a      	str	r2, [r3, #0]
  return -1;
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_exit>:

void _exit (int status)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ffe7 	bl	8000ec4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ef6:	e7fe      	b.n	8000ef6 <_exit+0x12>

08000ef8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e00a      	b.n	8000f20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f0a:	f3af 8000 	nop.w
 8000f0e:	4601      	mov	r1, r0
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbf0      	blt.n	8000f0a <_read+0x12>
  }

  return len;
 8000f28:	687b      	ldr	r3, [r7, #4]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e009      	b.n	8000f58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	60ba      	str	r2, [r7, #8]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbf1      	blt.n	8000f44 <_write+0x12>
  }
  return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_close>:

int _close(int file)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f92:	605a      	str	r2, [r3, #4]
  return 0;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_isatty>:

int _isatty(int file)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f004 f808 	bl	8005018 <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20080000 	.word	0x20080000
 8001034:	00000400 	.word	0x00000400
 8001038:	200008a0 	.word	0x200008a0
 800103c:	20008ac0 	.word	0x20008ac0

08001040 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <SystemInit+0x20>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <SystemInit+0x20>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800109c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800106a:	490e      	ldr	r1, [pc, #56]	; (80010a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001080:	4c0b      	ldr	r4, [pc, #44]	; (80010b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800108e:	f7ff ffd7 	bl	8001040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001092:	f003 ffc7 	bl	8005024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001096:	f7ff faa5 	bl	80005e4 <main>
  bx  lr    
 800109a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800109c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010a8:	08006338 	.word	0x08006338
  ldr r2, =_sbss
 80010ac:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80010b0:	20008ac0 	.word	0x20008ac0

080010b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC_IRQHandler>

080010b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f000 f92e 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f000 f805 	bl	80010d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c6:	f7ff fcb5 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_InitTick+0x54>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x58>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f93b 	bl	800136a <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 f911 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_InitTick+0x5c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000000 	.word	0x20000000
 8001128:	20000008 	.word	0x20000008
 800112c:	20000004 	.word	0x20000004

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008
 8001154:	200008a4 	.word	0x200008a4

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	200008a4 	.word	0x200008a4

08001170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff ffee 	bl	8001158 <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_Delay+0x44>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001196:	bf00      	nop
 8001198:	f7ff ffde 	bl	8001158 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008

080011b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <__NVIC_SetPriorityGrouping+0x40>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d4:	4013      	ands	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <__NVIC_SetPriorityGrouping+0x40>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00
 80011fc:	05fa0000 	.word	0x05fa0000

08001200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <__NVIC_GetPriorityGrouping+0x18>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f003 0307 	and.w	r3, r3, #7
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff47 	bl	80011b8 <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff5c 	bl	8001200 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff8e 	bl	8001270 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffb0 	bl	80012d8 <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e06a      	b.n	800146c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800139c:	2b00      	cmp	r3, #0
 800139e:	d106      	bne.n	80013ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2223      	movs	r2, #35	; 0x23
 80013a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fb67 	bl	8000a7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	4b31      	ldr	r3, [pc, #196]	; (8001474 <HAL_ETH_Init+0xf0>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a30      	ldr	r2, [pc, #192]	; (8001474 <HAL_ETH_Init+0xf0>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <HAL_ETH_Init+0xf0>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <HAL_ETH_Init+0xf4>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4a2b      	ldr	r2, [pc, #172]	; (8001478 <HAL_ETH_Init+0xf4>)
 80013cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013d2:	4b29      	ldr	r3, [pc, #164]	; (8001478 <HAL_ETH_Init+0xf4>)
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	4927      	ldr	r1, [pc, #156]	; (8001478 <HAL_ETH_Init+0xf4>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013e0:	4b25      	ldr	r3, [pc, #148]	; (8001478 <HAL_ETH_Init+0xf4>)
 80013e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013fc:	f7ff feac 	bl	8001158 <HAL_GetTick>
 8001400:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001402:	e011      	b.n	8001428 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001404:	f7ff fea8 	bl	8001158 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001412:	d909      	bls.n	8001428 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2204      	movs	r2, #4
 8001418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	22e0      	movs	r2, #224	; 0xe0
 8001420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e021      	b.n	800146c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1e4      	bne.n	8001404 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f958 	bl	80016f0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f9ff 	bl	8001844 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fa55 	bl	80018f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	461a      	mov	r2, r3
 8001452:	2100      	movs	r1, #0
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f9bd 	bl	80017d4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2210      	movs	r2, #16
 8001466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800

0800147c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <ETH_SetMACConfig+0x15c>)
 8001492:	4013      	ands	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	7c1b      	ldrb	r3, [r3, #16]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <ETH_SetMACConfig+0x28>
 800149e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014a2:	e000      	b.n	80014a6 <ETH_SetMACConfig+0x2a>
 80014a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	7c5b      	ldrb	r3, [r3, #17]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <ETH_SetMACConfig+0x38>
 80014ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014b2:	e000      	b.n	80014b6 <ETH_SetMACConfig+0x3a>
 80014b4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014b6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	7fdb      	ldrb	r3, [r3, #31]
 80014c2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80014c4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	7f92      	ldrb	r2, [r2, #30]
 80014d0:	2a00      	cmp	r2, #0
 80014d2:	d102      	bne.n	80014da <ETH_SetMACConfig+0x5e>
 80014d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d8:	e000      	b.n	80014dc <ETH_SetMACConfig+0x60>
 80014da:	2200      	movs	r2, #0
                        macconf->Speed |
 80014dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	7f1b      	ldrb	r3, [r3, #28]
 80014e2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014e4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	791b      	ldrb	r3, [r3, #4]
 80014f0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80014f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	d102      	bne.n	8001504 <ETH_SetMACConfig+0x88>
 80014fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001502:	e000      	b.n	8001506 <ETH_SetMACConfig+0x8a>
 8001504:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001506:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	7bdb      	ldrb	r3, [r3, #15]
 800150c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800150e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001514:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800151c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800151e:	4313      	orrs	r3, r2
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001536:	2001      	movs	r0, #1
 8001538:	f7ff fe1a 	bl	8001170 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001552:	4013      	ands	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001562:	2a00      	cmp	r2, #0
 8001564:	d101      	bne.n	800156a <ETH_SetMACConfig+0xee>
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	e000      	b.n	800156c <ETH_SetMACConfig+0xf0>
 800156a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800156c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001572:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800157a:	2a01      	cmp	r2, #1
 800157c:	d101      	bne.n	8001582 <ETH_SetMACConfig+0x106>
 800157e:	2208      	movs	r2, #8
 8001580:	e000      	b.n	8001584 <ETH_SetMACConfig+0x108>
 8001582:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001584:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800158c:	2a01      	cmp	r2, #1
 800158e:	d101      	bne.n	8001594 <ETH_SetMACConfig+0x118>
 8001590:	2204      	movs	r2, #4
 8001592:	e000      	b.n	8001596 <ETH_SetMACConfig+0x11a>
 8001594:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001596:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800159e:	2a01      	cmp	r2, #1
 80015a0:	d101      	bne.n	80015a6 <ETH_SetMACConfig+0x12a>
 80015a2:	2202      	movs	r2, #2
 80015a4:	e000      	b.n	80015a8 <ETH_SetMACConfig+0x12c>
 80015a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015a8:	4313      	orrs	r3, r2
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7ff fdd5 	bl	8001170 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	619a      	str	r2, [r3, #24]
}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	ff20810f 	.word	0xff20810f

080015dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <ETH_SetDMAConfig+0x110>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	7b1b      	ldrb	r3, [r3, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d102      	bne.n	8001608 <ETH_SetDMAConfig+0x2c>
 8001602:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001606:	e000      	b.n	800160a <ETH_SetDMAConfig+0x2e>
 8001608:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	7b5b      	ldrb	r3, [r3, #13]
 800160e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001610:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	7f52      	ldrb	r2, [r2, #29]
 8001616:	2a00      	cmp	r2, #0
 8001618:	d102      	bne.n	8001620 <ETH_SetDMAConfig+0x44>
 800161a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800161e:	e000      	b.n	8001622 <ETH_SetDMAConfig+0x46>
 8001620:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001622:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	7b9b      	ldrb	r3, [r3, #14]
 8001628:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800162a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001630:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	7f1b      	ldrb	r3, [r3, #28]
 8001636:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001638:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	7f9b      	ldrb	r3, [r3, #30]
 800163e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001640:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001646:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800164e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001650:	4313      	orrs	r3, r2
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001660:	461a      	mov	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001672:	2001      	movs	r0, #1
 8001674:	f7ff fd7c 	bl	8001170 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001680:	461a      	mov	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	791b      	ldrb	r3, [r3, #4]
 800168a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001690:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001696:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800169c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016a4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016a6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016ae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016b4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016c2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff fd4d 	bl	8001170 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016de:	461a      	mov	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	f8de3f23 	.word	0xf8de3f23

080016f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0a6      	sub	sp, #152	; 0x98
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80016fe:	2301      	movs	r3, #1
 8001700:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001704:	2300      	movs	r3, #0
 8001706:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800170e:	2301      	movs	r3, #1
 8001710:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800171a:	2301      	movs	r3, #1
 800171c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800172c:	2300      	movs	r3, #0
 800172e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001736:	2300      	movs	r3, #0
 8001738:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001752:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001756:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001758:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800175c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001764:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001768:	4619      	mov	r1, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fe86 	bl	800147c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001770:	2301      	movs	r3, #1
 8001772:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001774:	2301      	movs	r3, #1
 8001776:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001778:	2301      	movs	r3, #1
 800177a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800177e:	2301      	movs	r3, #1
 8001780:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001792:	2300      	movs	r3, #0
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001796:	2301      	movs	r3, #1
 8001798:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800179c:	2301      	movs	r3, #1
 800179e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	4619      	mov	r1, r3
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ff08 	bl	80015dc <ETH_SetDMAConfig>
}
 80017cc:	bf00      	nop
 80017ce:	3798      	adds	r7, #152	; 0x98
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3305      	adds	r3, #5
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	3204      	adds	r2, #4
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <ETH_MACAddressConfig+0x68>)
 80017f6:	4413      	add	r3, r2
 80017f8:	461a      	mov	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3303      	adds	r3, #3
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	061a      	lsls	r2, r3, #24
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3302      	adds	r3, #2
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	041b      	lsls	r3, r3, #16
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3301      	adds	r3, #1
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	4313      	orrs	r3, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	7812      	ldrb	r2, [r2, #0]
 800181e:	4313      	orrs	r3, r2
 8001820:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <ETH_MACAddressConfig+0x6c>)
 8001826:	4413      	add	r3, r2
 8001828:	461a      	mov	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	6013      	str	r3, [r2, #0]
}
 800182e:	bf00      	nop
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40028040 	.word	0x40028040
 8001840:	40028044 	.word	0x40028044

08001844 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e03e      	b.n	80018d0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68d9      	ldr	r1, [r3, #12]
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2200      	movs	r2, #0
 800186e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	3206      	adds	r2, #6
 8001884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d80c      	bhi.n	80018b4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68d9      	ldr	r1, [r3, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	e004      	b.n	80018be <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	461a      	mov	r2, r3
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3301      	adds	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d9bd      	bls.n	8001852 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e8:	611a      	str	r2, [r3, #16]
}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b085      	sub	sp, #20
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	e046      	b.n	8001992 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6919      	ldr	r1, [r3, #16]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	440b      	add	r3, r1
 8001914:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2200      	movs	r2, #0
 8001920:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001940:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001948:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001956:	68b9      	ldr	r1, [r7, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	3212      	adds	r2, #18
 800195e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d80c      	bhi.n	8001982 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6919      	ldr	r1, [r3, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	461a      	mov	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	e004      	b.n	800198c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	461a      	mov	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3301      	adds	r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2b03      	cmp	r3, #3
 8001996:	d9b5      	bls.n	8001904 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c2:	60da      	str	r2, [r3, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
 80019ee:	e175      	b.n	8001cdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019f0:	2201      	movs	r2, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	f040 8164 	bne.w	8001cd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d005      	beq.n	8001a26 <HAL_GPIO_Init+0x56>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d130      	bne.n	8001a88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	2203      	movs	r2, #3
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 0201 	and.w	r2, r3, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d017      	beq.n	8001ac4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d123      	bne.n	8001b18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	08da      	lsrs	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3208      	adds	r2, #8
 8001ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	69b9      	ldr	r1, [r7, #24]
 8001b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0203 	and.w	r2, r3, #3
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80be 	beq.w	8001cd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	4b66      	ldr	r3, [pc, #408]	; (8001cf4 <HAL_GPIO_Init+0x324>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a65      	ldr	r2, [pc, #404]	; (8001cf4 <HAL_GPIO_Init+0x324>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b63      	ldr	r3, [pc, #396]	; (8001cf4 <HAL_GPIO_Init+0x324>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b72:	4a61      	ldr	r2, [pc, #388]	; (8001cf8 <HAL_GPIO_Init+0x328>)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a58      	ldr	r2, [pc, #352]	; (8001cfc <HAL_GPIO_Init+0x32c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d037      	beq.n	8001c0e <HAL_GPIO_Init+0x23e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a57      	ldr	r2, [pc, #348]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d031      	beq.n	8001c0a <HAL_GPIO_Init+0x23a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a56      	ldr	r2, [pc, #344]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d02b      	beq.n	8001c06 <HAL_GPIO_Init+0x236>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a55      	ldr	r2, [pc, #340]	; (8001d08 <HAL_GPIO_Init+0x338>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d025      	beq.n	8001c02 <HAL_GPIO_Init+0x232>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a54      	ldr	r2, [pc, #336]	; (8001d0c <HAL_GPIO_Init+0x33c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d01f      	beq.n	8001bfe <HAL_GPIO_Init+0x22e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a53      	ldr	r2, [pc, #332]	; (8001d10 <HAL_GPIO_Init+0x340>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d019      	beq.n	8001bfa <HAL_GPIO_Init+0x22a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a52      	ldr	r2, [pc, #328]	; (8001d14 <HAL_GPIO_Init+0x344>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0x226>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a51      	ldr	r2, [pc, #324]	; (8001d18 <HAL_GPIO_Init+0x348>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_GPIO_Init+0x222>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a50      	ldr	r2, [pc, #320]	; (8001d1c <HAL_GPIO_Init+0x34c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_Init+0x21e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4f      	ldr	r2, [pc, #316]	; (8001d20 <HAL_GPIO_Init+0x350>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_Init+0x21a>
 8001be6:	2309      	movs	r3, #9
 8001be8:	e012      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bea:	230a      	movs	r3, #10
 8001bec:	e010      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bee:	2308      	movs	r3, #8
 8001bf0:	e00e      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	e00c      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	e00a      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	e008      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001bfe:	2304      	movs	r3, #4
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001c02:	2303      	movs	r3, #3
 8001c04:	e004      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_GPIO_Init+0x240>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	f002 0203 	and.w	r2, r2, #3
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	4093      	lsls	r3, r2
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c20:	4935      	ldr	r1, [pc, #212]	; (8001cf8 <HAL_GPIO_Init+0x328>)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c52:	4a34      	ldr	r2, [pc, #208]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c58:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c7c:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_GPIO_Init+0x354>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b0f      	cmp	r3, #15
 8001ce0:	f67f ae86 	bls.w	80019f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40020800 	.word	0x40020800
 8001d08:	40020c00 	.word	0x40020c00
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40021400 	.word	0x40021400
 8001d14:	40021800 	.word	0x40021800
 8001d18:	40021c00 	.word	0x40021c00
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	40022400 	.word	0x40022400
 8001d24:	40013c00 	.word	0x40013c00

08001d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
 8001d34:	4613      	mov	r3, r2
 8001d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d38:	787b      	ldrb	r3, [r7, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d44:	e003      	b.n	8001d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d46:	887b      	ldrh	r3, [r7, #2]
 8001d48:	041a      	lsls	r2, r3, #16
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	619a      	str	r2, [r3, #24]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e07f      	b.n	8001e6e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe ff32 	bl	8000bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2224      	movs	r2, #36	; 0x24
 8001d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0201 	bic.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d107      	bne.n	8001dd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	e006      	b.n	8001de4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001de2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d104      	bne.n	8001df6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001df4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_I2C_Init+0x11c>)
 8001e02:	430b      	orrs	r3, r1
 8001e04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69d9      	ldr	r1, [r3, #28]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1a      	ldr	r2, [r3, #32]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	02008000 	.word	0x02008000

08001e7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	4608      	mov	r0, r1
 8001e86:	4611      	mov	r1, r2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	817b      	strh	r3, [r7, #10]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	813b      	strh	r3, [r7, #8]
 8001e92:	4613      	mov	r3, r2
 8001e94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	f040 80f9 	bne.w	8002096 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_I2C_Mem_Write+0x34>
 8001eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0ed      	b.n	8002098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_I2C_Mem_Write+0x4e>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e0e6      	b.n	8002098 <HAL_I2C_Mem_Write+0x21c>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ed2:	f7ff f941 	bl	8001158 <HAL_GetTick>
 8001ed6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2319      	movs	r3, #25
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f955 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0d1      	b.n	8002098 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2221      	movs	r2, #33	; 0x21
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6a3a      	ldr	r2, [r7, #32]
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f1c:	88f8      	ldrh	r0, [r7, #6]
 8001f1e:	893a      	ldrh	r2, [r7, #8]
 8001f20:	8979      	ldrh	r1, [r7, #10]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f8b9 	bl	80020a4 <I2C_RequestMemoryWrite>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0a9      	b.n	8002098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2bff      	cmp	r3, #255	; 0xff
 8001f4c:	d90e      	bls.n	8001f6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	22ff      	movs	r2, #255	; 0xff
 8001f52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	8979      	ldrh	r1, [r7, #10]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 fab1 	bl	80024cc <I2C_TransferConfig>
 8001f6a:	e00f      	b.n	8001f8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	8979      	ldrh	r1, [r7, #10]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 faa0 	bl	80024cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 f93f 	bl	8002214 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e07b      	b.n	8002098 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	781a      	ldrb	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d034      	beq.n	8002044 <HAL_I2C_Mem_Write+0x1c8>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d130      	bne.n	8002044 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f8d1 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e04d      	b.n	8002098 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	2bff      	cmp	r3, #255	; 0xff
 8002004:	d90e      	bls.n	8002024 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	22ff      	movs	r2, #255	; 0xff
 800200a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002010:	b2da      	uxtb	r2, r3
 8002012:	8979      	ldrh	r1, [r7, #10]
 8002014:	2300      	movs	r3, #0
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 fa55 	bl	80024cc <I2C_TransferConfig>
 8002022:	e00f      	b.n	8002044 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	b2da      	uxtb	r2, r3
 8002034:	8979      	ldrh	r1, [r7, #10]
 8002036:	2300      	movs	r3, #0
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fa44 	bl	80024cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d19e      	bne.n	8001f8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f91e 	bl	8002294 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e01a      	b.n	8002098 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2220      	movs	r2, #32
 8002068:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_I2C_Mem_Write+0x224>)
 8002076:	400b      	ands	r3, r1
 8002078:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002096:	2302      	movs	r3, #2
  }
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	fe00e800 	.word	0xfe00e800

080020a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	817b      	strh	r3, [r7, #10]
 80020b6:	460b      	mov	r3, r1
 80020b8:	813b      	strh	r3, [r7, #8]
 80020ba:	4613      	mov	r3, r2
 80020bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	8979      	ldrh	r1, [r7, #10]
 80020c4:	4b20      	ldr	r3, [pc, #128]	; (8002148 <I2C_RequestMemoryWrite+0xa4>)
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f9fd 	bl	80024cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	69b9      	ldr	r1, [r7, #24]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f89c 	bl	8002214 <I2C_WaitOnTXISFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e02c      	b.n	8002140 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020ec:	893b      	ldrh	r3, [r7, #8]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28
 80020f6:	e015      	b.n	8002124 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020f8:	893b      	ldrh	r3, [r7, #8]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	69b9      	ldr	r1, [r7, #24]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f882 	bl	8002214 <I2C_WaitOnTXISFlagUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e012      	b.n	8002140 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800211a:	893b      	ldrh	r3, [r7, #8]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	2200      	movs	r2, #0
 800212c:	2180      	movs	r1, #128	; 0x80
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f830 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	80002000 	.word	0x80002000

0800214c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b02      	cmp	r3, #2
 8002160:	d103      	bne.n	800216a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d007      	beq.n	8002188 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	619a      	str	r2, [r3, #24]
  }
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a4:	e022      	b.n	80021ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d01e      	beq.n	80021ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ae:	f7fe ffd3 	bl	8001158 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d113      	bne.n	80021ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	f043 0220 	orr.w	r2, r3, #32
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e00f      	b.n	800220c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	4013      	ands	r3, r2
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	429a      	cmp	r2, r3
 8002208:	d0cd      	beq.n	80021a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002220:	e02c      	b.n	800227c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f870 	bl	800230c <I2C_IsErrorOccurred>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e02a      	b.n	800228c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d01e      	beq.n	800227c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800223e:	f7fe ff8b 	bl	8001158 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	429a      	cmp	r2, r3
 800224c:	d302      	bcc.n	8002254 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d113      	bne.n	800227c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e007      	b.n	800228c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d1cb      	bne.n	8002222 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a0:	e028      	b.n	80022f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f830 	bl	800230c <I2C_IsErrorOccurred>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e026      	b.n	8002304 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b6:	f7fe ff4f 	bl	8001158 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d302      	bcc.n	80022cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d113      	bne.n	80022f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	f043 0220 	orr.w	r2, r3, #32
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e007      	b.n	8002304 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b20      	cmp	r3, #32
 8002300:	d1cf      	bne.n	80022a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	d068      	beq.n	800240a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2210      	movs	r2, #16
 800233e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002340:	e049      	b.n	80023d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d045      	beq.n	80023d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800234a:	f7fe ff05 	bl	8001158 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	429a      	cmp	r2, r3
 8002358:	d302      	bcc.n	8002360 <I2C_IsErrorOccurred+0x54>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d13a      	bne.n	80023d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002372:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800237e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002382:	d121      	bne.n	80023c8 <I2C_IsErrorOccurred+0xbc>
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800238a:	d01d      	beq.n	80023c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	2b20      	cmp	r3, #32
 8002390:	d01a      	beq.n	80023c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023a2:	f7fe fed9 	bl	8001158 <HAL_GetTick>
 80023a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a8:	e00e      	b.n	80023c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023aa:	f7fe fed5 	bl	8001158 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b19      	cmp	r3, #25
 80023b6:	d907      	bls.n	80023c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	f043 0320 	orr.w	r3, r3, #32
 80023be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80023c6:	e006      	b.n	80023d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d1e9      	bne.n	80023aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d003      	beq.n	80023ec <I2C_IsErrorOccurred+0xe0>
 80023e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0aa      	beq.n	8002342 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80023ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d103      	bne.n	80023fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2220      	movs	r2, #32
 80023fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00b      	beq.n	8002434 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800242c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	f043 0308 	orr.w	r3, r3, #8
 8002444:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800244e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	f043 0302 	orr.w	r3, r3, #2
 8002466:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002470:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01c      	beq.n	80024ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f7ff fe63 	bl	800214c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <I2C_IsErrorOccurred+0x1bc>)
 8002492:	400b      	ands	r3, r1
 8002494:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80024ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3728      	adds	r7, #40	; 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	fe00e800 	.word	0xfe00e800

080024cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	817b      	strh	r3, [r7, #10]
 80024da:	4613      	mov	r3, r2
 80024dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024de:	897b      	ldrh	r3, [r7, #10]
 80024e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024e4:	7a7b      	ldrb	r3, [r7, #9]
 80024e6:	041b      	lsls	r3, r3, #16
 80024e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	0d5b      	lsrs	r3, r3, #21
 8002506:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <I2C_TransferConfig+0x60>)
 800250c:	430b      	orrs	r3, r1
 800250e:	43db      	mvns	r3, r3
 8002510:	ea02 0103 	and.w	r1, r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800251e:	bf00      	nop
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	03ff63ff 	.word	0x03ff63ff

08002530 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b20      	cmp	r3, #32
 8002544:	d138      	bne.n	80025b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002550:	2302      	movs	r3, #2
 8002552:	e032      	b.n	80025ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2224      	movs	r2, #36	; 0x24
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002582:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b085      	sub	sp, #20
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d139      	bne.n	8002650 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e033      	b.n	8002652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2224      	movs	r2, #36	; 0x24
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002618:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	e000      	b.n	8002652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
  }
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800265e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002660:	b08f      	sub	sp, #60	; 0x3c
 8002662:	af0a      	add	r7, sp, #40	; 0x28
 8002664:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e116      	b.n	800289e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fb6e 	bl	8000d6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2203      	movs	r2, #3
 8002694:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 ff3a 	bl	8004528 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	687e      	ldr	r6, [r7, #4]
 80026bc:	466d      	mov	r5, sp
 80026be:	f106 0410 	add.w	r4, r6, #16
 80026c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80026d2:	1d33      	adds	r3, r6, #4
 80026d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d6:	6838      	ldr	r0, [r7, #0]
 80026d8:	f001 fece 	bl	8004478 <USB_CoreInit>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0d7      	b.n	800289e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f001 ff28 	bl	800454a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e04a      	b.n	8002796 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	333d      	adds	r3, #61	; 0x3d
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	333c      	adds	r3, #60	; 0x3c
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	b298      	uxth	r0, r3
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3344      	adds	r3, #68	; 0x44
 800273c:	4602      	mov	r2, r0
 800273e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	3340      	adds	r3, #64	; 0x40
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	3348      	adds	r3, #72	; 0x48
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	334c      	adds	r3, #76	; 0x4c
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	3354      	adds	r3, #84	; 0x54
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	3301      	adds	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	d3af      	bcc.n	8002700 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
 80027a4:	e044      	b.n	8002830 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	3301      	adds	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	429a      	cmp	r2, r3
 8002838:	d3b5      	bcc.n	80027a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	687e      	ldr	r6, [r7, #4]
 8002842:	466d      	mov	r5, sp
 8002844:	f106 0410 	add.w	r4, r6, #16
 8002848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800284c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002850:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002854:	e885 0003 	stmia.w	r5, {r0, r1}
 8002858:	1d33      	adds	r3, r6, #4
 800285a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800285c:	6838      	ldr	r0, [r7, #0]
 800285e:	f001 fec1 	bl	80045e4 <USB_DevInit>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e014      	b.n	800289e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	2b01      	cmp	r3, #1
 800288a:	d102      	bne.n	8002892 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f80b 	bl	80028a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f002 f87f 	bl	800499a <USB_DevDisconnect>

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_PCDEx_ActivateLPM+0x44>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	10000003 	.word	0x10000003

080028f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40007000 	.word	0x40007000

08002910 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002932:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1d      	ldr	r2, [pc, #116]	; (80029ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800293e:	f7fe fc0b 	bl	8001158 <HAL_GetTick>
 8002942:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002944:	e009      	b.n	800295a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002946:	f7fe fc07 	bl	8001158 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002954:	d901      	bls.n	800295a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e022      	b.n	80029a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002966:	d1ee      	bne.n	8002946 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002968:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800296e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002972:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002974:	f7fe fbf0 	bl	8001158 <HAL_GetTick>
 8002978:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800297a:	e009      	b.n	8002990 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800297c:	f7fe fbec 	bl	8001158 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800298a:	d901      	bls.n	8002990 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e007      	b.n	80029a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800299c:	d1ee      	bne.n	800297c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40007000 	.word	0x40007000

080029b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029b8:	2300      	movs	r3, #0
 80029ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e29b      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8087 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d4:	4b96      	ldr	r3, [pc, #600]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d00c      	beq.n	80029fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e0:	4b93      	ldr	r3, [pc, #588]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d112      	bne.n	8002a12 <HAL_RCC_OscConfig+0x62>
 80029ec:	4b90      	ldr	r3, [pc, #576]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f8:	d10b      	bne.n	8002a12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fa:	4b8d      	ldr	r3, [pc, #564]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d06c      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x130>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d168      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e275      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x7a>
 8002a1c:	4b84      	ldr	r3, [pc, #528]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a83      	ldr	r2, [pc, #524]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	e02e      	b.n	8002a88 <HAL_RCC_OscConfig+0xd8>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x9c>
 8002a32:	4b7f      	ldr	r3, [pc, #508]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a7e      	ldr	r2, [pc, #504]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	4b7c      	ldr	r3, [pc, #496]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a7b      	ldr	r2, [pc, #492]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e01d      	b.n	8002a88 <HAL_RCC_OscConfig+0xd8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0xc0>
 8002a56:	4b76      	ldr	r3, [pc, #472]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a75      	ldr	r2, [pc, #468]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b73      	ldr	r3, [pc, #460]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a72      	ldr	r2, [pc, #456]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e00b      	b.n	8002a88 <HAL_RCC_OscConfig+0xd8>
 8002a70:	4b6f      	ldr	r3, [pc, #444]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a6e      	ldr	r2, [pc, #440]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b6c      	ldr	r3, [pc, #432]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a6b      	ldr	r2, [pc, #428]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d013      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe fb62 	bl	8001158 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a98:	f7fe fb5e 	bl	8001158 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e229      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	4b61      	ldr	r3, [pc, #388]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0xe8>
 8002ab6:	e014      	b.n	8002ae2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fb4e 	bl	8001158 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fb4a 	bl	8001158 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e215      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad2:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x110>
 8002ade:	e000      	b.n	8002ae2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d069      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aee:	4b50      	ldr	r3, [pc, #320]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afa:	4b4d      	ldr	r3, [pc, #308]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d11c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x190>
 8002b06:	4b4a      	ldr	r3, [pc, #296]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d116      	bne.n	8002b40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b12:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <HAL_RCC_OscConfig+0x17a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e1e9      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2a:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	493d      	ldr	r1, [pc, #244]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	e040      	b.n	8002bc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d023      	beq.n	8002b90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b48:	4b39      	ldr	r3, [pc, #228]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a38      	ldr	r2, [pc, #224]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fb00 	bl	8001158 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5c:	f7fe fafc 	bl	8001158 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e1c7      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b2d      	ldr	r3, [pc, #180]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4929      	ldr	r1, [pc, #164]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
 8002b8e:	e018      	b.n	8002bc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a26      	ldr	r2, [pc, #152]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fadc 	bl	8001158 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba4:	f7fe fad8 	bl	8001158 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e1a3      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d038      	beq.n	8002c40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d019      	beq.n	8002c0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bda:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be2:	f7fe fab9 	bl	8001158 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bea:	f7fe fab5 	bl	8001158 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e180      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x23a>
 8002c08:	e01a      	b.n	8002c40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0e:	4a08      	ldr	r2, [pc, #32]	; (8002c30 <HAL_RCC_OscConfig+0x280>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c16:	f7fe fa9f 	bl	8001158 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1e:	f7fe fa9b 	bl	8001158 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d903      	bls.n	8002c34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e166      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
 8002c30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	4b92      	ldr	r3, [pc, #584]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ee      	bne.n	8002c1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80a4 	beq.w	8002d96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4e:	4b8c      	ldr	r3, [pc, #560]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10d      	bne.n	8002c76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	4b89      	ldr	r3, [pc, #548]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	4a88      	ldr	r2, [pc, #544]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c64:	6413      	str	r3, [r2, #64]	; 0x40
 8002c66:	4b86      	ldr	r3, [pc, #536]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c72:	2301      	movs	r3, #1
 8002c74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c76:	4b83      	ldr	r3, [pc, #524]	; (8002e84 <HAL_RCC_OscConfig+0x4d4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d118      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c82:	4b80      	ldr	r3, [pc, #512]	; (8002e84 <HAL_RCC_OscConfig+0x4d4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a7f      	ldr	r2, [pc, #508]	; (8002e84 <HAL_RCC_OscConfig+0x4d4>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fa63 	bl	8001158 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c96:	f7fe fa5f 	bl	8001158 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b64      	cmp	r3, #100	; 0x64
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e12a      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca8:	4b76      	ldr	r3, [pc, #472]	; (8002e84 <HAL_RCC_OscConfig+0x4d4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x31a>
 8002cbc:	4b70      	ldr	r3, [pc, #448]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	4a6f      	ldr	r2, [pc, #444]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc8:	e02d      	b.n	8002d26 <HAL_RCC_OscConfig+0x376>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0x33c>
 8002cd2:	4b6b      	ldr	r3, [pc, #428]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a6a      	ldr	r2, [pc, #424]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cde:	4b68      	ldr	r3, [pc, #416]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4a67      	ldr	r2, [pc, #412]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002ce4:	f023 0304 	bic.w	r3, r3, #4
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cea:	e01c      	b.n	8002d26 <HAL_RCC_OscConfig+0x376>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b05      	cmp	r3, #5
 8002cf2:	d10c      	bne.n	8002d0e <HAL_RCC_OscConfig+0x35e>
 8002cf4:	4b62      	ldr	r3, [pc, #392]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	4a61      	ldr	r2, [pc, #388]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002cfa:	f043 0304 	orr.w	r3, r3, #4
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002d00:	4b5f      	ldr	r3, [pc, #380]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	4a5e      	ldr	r2, [pc, #376]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0c:	e00b      	b.n	8002d26 <HAL_RCC_OscConfig+0x376>
 8002d0e:	4b5c      	ldr	r3, [pc, #368]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	4a5b      	ldr	r2, [pc, #364]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1a:	4b59      	ldr	r3, [pc, #356]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1e:	4a58      	ldr	r2, [pc, #352]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d20:	f023 0304 	bic.w	r3, r3, #4
 8002d24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d015      	beq.n	8002d5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2e:	f7fe fa13 	bl	8001158 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d36:	f7fe fa0f 	bl	8001158 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e0d8      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4c:	4b4c      	ldr	r3, [pc, #304]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ee      	beq.n	8002d36 <HAL_RCC_OscConfig+0x386>
 8002d58:	e014      	b.n	8002d84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5a:	f7fe f9fd 	bl	8001158 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d60:	e00a      	b.n	8002d78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d62:	f7fe f9f9 	bl	8001158 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e0c2      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d78:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ee      	bne.n	8002d62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d105      	bne.n	8002d96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8a:	4b3d      	ldr	r3, [pc, #244]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a3c      	ldr	r2, [pc, #240]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80ae 	beq.w	8002efc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da0:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d06d      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d14b      	bne.n	8002e4c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db4:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a31      	ldr	r2, [pc, #196]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe f9ca 	bl	8001158 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe f9c6 	bl	8001158 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e091      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	019b      	lsls	r3, r3, #6
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	041b      	lsls	r3, r3, #16
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	071b      	lsls	r3, r3, #28
 8002e12:	491b      	ldr	r1, [pc, #108]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e18:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe f998 	bl	8001158 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe f994 	bl	8001158 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e05f      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x47c>
 8002e4a:	e057      	b.n	8002efc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0b      	ldr	r2, [pc, #44]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe f97e 	bl	8001158 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe f97a 	bl	8001158 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e045      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x4b0>
 8002e7e:	e03d      	b.n	8002efc <HAL_RCC_OscConfig+0x54c>
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e88:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <HAL_RCC_OscConfig+0x558>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d030      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d129      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d122      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eb8:	4013      	ands	r3, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ebe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d119      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d10f      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d107      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40023800 	.word	0x40023800

08002f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0d0      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f24:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d910      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 020f 	bic.w	r2, r3, #15
 8002f3a:	4965      	ldr	r1, [pc, #404]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b63      	ldr	r3, [pc, #396]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0b8      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f6c:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a58      	ldr	r2, [pc, #352]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f84:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b50      	ldr	r3, [pc, #320]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	494d      	ldr	r1, [pc, #308]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d040      	beq.n	8003030 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d115      	bne.n	8002fee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fce:	4b41      	ldr	r3, [pc, #260]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e073      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fde:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e06b      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fee:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4936      	ldr	r1, [pc, #216]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003000:	f7fe f8aa 	bl	8001158 <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	e00a      	b.n	800301e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003008:	f7fe f8a6 	bl	8001158 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e053      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	4b2d      	ldr	r3, [pc, #180]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 020c 	and.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	429a      	cmp	r2, r3
 800302e:	d1eb      	bne.n	8003008 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003030:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d210      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 020f 	bic.w	r2, r3, #15
 8003046:	4922      	ldr	r1, [pc, #136]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e032      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4916      	ldr	r1, [pc, #88]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	490e      	ldr	r1, [pc, #56]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800309e:	f000 f821 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	490a      	ldr	r1, [pc, #40]	; (80030d8 <HAL_RCC_ClockConfig+0x1cc>)
 80030b0:	5ccb      	ldrb	r3, [r1, r3]
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <HAL_RCC_ClockConfig+0x1d0>)
 80030b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1d4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe f806 	bl	80010d0 <HAL_InitTick>

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023c00 	.word	0x40023c00
 80030d4:	40023800 	.word	0x40023800
 80030d8:	080061c8 	.word	0x080061c8
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e8:	b094      	sub	sp, #80	; 0x50
 80030ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	647b      	str	r3, [r7, #68]	; 0x44
 80030f0:	2300      	movs	r3, #0
 80030f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f4:	2300      	movs	r3, #0
 80030f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030fc:	4b79      	ldr	r3, [pc, #484]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d00d      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x40>
 8003108:	2b08      	cmp	r3, #8
 800310a:	f200 80e1 	bhi.w	80032d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x34>
 8003112:	2b04      	cmp	r3, #4
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0x3a>
 8003116:	e0db      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003118:	4b73      	ldr	r3, [pc, #460]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800311a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800311c:	e0db      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800311e:	4b73      	ldr	r3, [pc, #460]	; (80032ec <HAL_RCC_GetSysClockFreq+0x208>)
 8003120:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003122:	e0d8      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003124:	4b6f      	ldr	r3, [pc, #444]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800312c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800312e:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d063      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313a:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	2200      	movs	r2, #0
 8003142:	63bb      	str	r3, [r7, #56]	; 0x38
 8003144:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314c:	633b      	str	r3, [r7, #48]	; 0x30
 800314e:	2300      	movs	r3, #0
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
 8003152:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003156:	4622      	mov	r2, r4
 8003158:	462b      	mov	r3, r5
 800315a:	f04f 0000 	mov.w	r0, #0
 800315e:	f04f 0100 	mov.w	r1, #0
 8003162:	0159      	lsls	r1, r3, #5
 8003164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003168:	0150      	lsls	r0, r2, #5
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4621      	mov	r1, r4
 8003170:	1a51      	subs	r1, r2, r1
 8003172:	6139      	str	r1, [r7, #16]
 8003174:	4629      	mov	r1, r5
 8003176:	eb63 0301 	sbc.w	r3, r3, r1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003188:	4659      	mov	r1, fp
 800318a:	018b      	lsls	r3, r1, #6
 800318c:	4651      	mov	r1, sl
 800318e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003192:	4651      	mov	r1, sl
 8003194:	018a      	lsls	r2, r1, #6
 8003196:	4651      	mov	r1, sl
 8003198:	ebb2 0801 	subs.w	r8, r2, r1
 800319c:	4659      	mov	r1, fp
 800319e:	eb63 0901 	sbc.w	r9, r3, r1
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031b6:	4690      	mov	r8, r2
 80031b8:	4699      	mov	r9, r3
 80031ba:	4623      	mov	r3, r4
 80031bc:	eb18 0303 	adds.w	r3, r8, r3
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	462b      	mov	r3, r5
 80031c4:	eb49 0303 	adc.w	r3, r9, r3
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031d6:	4629      	mov	r1, r5
 80031d8:	024b      	lsls	r3, r1, #9
 80031da:	4621      	mov	r1, r4
 80031dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031e0:	4621      	mov	r1, r4
 80031e2:	024a      	lsls	r2, r1, #9
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ea:	2200      	movs	r2, #0
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031f4:	f7fd f874 	bl	80002e0 <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4613      	mov	r3, r2
 80031fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003200:	e058      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003202:	4b38      	ldr	r3, [pc, #224]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	099b      	lsrs	r3, r3, #6
 8003208:	2200      	movs	r2, #0
 800320a:	4618      	mov	r0, r3
 800320c:	4611      	mov	r1, r2
 800320e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003212:	623b      	str	r3, [r7, #32]
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
 8003218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800321c:	4642      	mov	r2, r8
 800321e:	464b      	mov	r3, r9
 8003220:	f04f 0000 	mov.w	r0, #0
 8003224:	f04f 0100 	mov.w	r1, #0
 8003228:	0159      	lsls	r1, r3, #5
 800322a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800322e:	0150      	lsls	r0, r2, #5
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4641      	mov	r1, r8
 8003236:	ebb2 0a01 	subs.w	sl, r2, r1
 800323a:	4649      	mov	r1, r9
 800323c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800324c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003254:	ebb2 040a 	subs.w	r4, r2, sl
 8003258:	eb63 050b 	sbc.w	r5, r3, fp
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	00eb      	lsls	r3, r5, #3
 8003266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800326a:	00e2      	lsls	r2, r4, #3
 800326c:	4614      	mov	r4, r2
 800326e:	461d      	mov	r5, r3
 8003270:	4643      	mov	r3, r8
 8003272:	18e3      	adds	r3, r4, r3
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	464b      	mov	r3, r9
 8003278:	eb45 0303 	adc.w	r3, r5, r3
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800328a:	4629      	mov	r1, r5
 800328c:	028b      	lsls	r3, r1, #10
 800328e:	4621      	mov	r1, r4
 8003290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003294:	4621      	mov	r1, r4
 8003296:	028a      	lsls	r2, r1, #10
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329e:	2200      	movs	r2, #0
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	61fa      	str	r2, [r7, #28]
 80032a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032a8:	f7fd f81a 	bl	80002e0 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4613      	mov	r3, r2
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	3301      	adds	r3, #1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80032c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ce:	e002      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3750      	adds	r7, #80	; 0x50
 80032dc:	46bd      	mov	sp, r7
 80032de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	00f42400 	.word	0x00f42400
 80032ec:	007a1200 	.word	0x007a1200

080032f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f4:	4b03      	ldr	r3, [pc, #12]	; (8003304 <HAL_RCC_GetHCLKFreq+0x14>)
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000000 	.word	0x20000000

08003308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800330c:	f7ff fff0 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0a9b      	lsrs	r3, r3, #10
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4903      	ldr	r1, [pc, #12]	; (800332c <HAL_RCC_GetPCLK1Freq+0x24>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	080061d8 	.word	0x080061d8

08003330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003334:	f7ff ffdc 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0b5b      	lsrs	r3, r3, #13
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	080061d8 	.word	0x080061d8

08003358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d012      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003380:	4b69      	ldr	r3, [pc, #420]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a68      	ldr	r2, [pc, #416]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003386:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800338a:	6093      	str	r3, [r2, #8]
 800338c:	4b66      	ldr	r3, [pc, #408]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003394:	4964      	ldr	r1, [pc, #400]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033a2:	2301      	movs	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d017      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b2:	4b5d      	ldr	r3, [pc, #372]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	4959      	ldr	r1, [pc, #356]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d0:	d101      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033d2:	2301      	movs	r3, #1
 80033d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033de:	2301      	movs	r3, #1
 80033e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d017      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ee:	4b4e      	ldr	r3, [pc, #312]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	494a      	ldr	r1, [pc, #296]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340c:	d101      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800341a:	2301      	movs	r3, #1
 800341c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800342a:	2301      	movs	r3, #1
 800342c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 808b 	beq.w	8003552 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800343c:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	4a39      	ldr	r2, [pc, #228]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003446:	6413      	str	r3, [r2, #64]	; 0x40
 8003448:	4b37      	ldr	r3, [pc, #220]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003454:	4b35      	ldr	r3, [pc, #212]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a34      	ldr	r2, [pc, #208]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800345a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003460:	f7fd fe7a 	bl	8001158 <HAL_GetTick>
 8003464:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003468:	f7fd fe76 	bl	8001158 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e38f      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800347a:	4b2c      	ldr	r3, [pc, #176]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003486:	4b28      	ldr	r3, [pc, #160]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d035      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d02e      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034a4:	4b20      	ldr	r3, [pc, #128]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ae:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034ba:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4a1a      	ldr	r2, [pc, #104]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034c6:	4a18      	ldr	r2, [pc, #96]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034cc:	4b16      	ldr	r3, [pc, #88]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d114      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fd fe3e 	bl	8001158 <HAL_GetTick>
 80034dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034de:	e00a      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e0:	f7fd fe3a 	bl	8001158 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e351      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f6:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0ee      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800350e:	d111      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800351e:	400b      	ands	r3, r1
 8003520:	4901      	ldr	r1, [pc, #4]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
 8003526:	e00b      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003528:	40023800 	.word	0x40023800
 800352c:	40007000 	.word	0x40007000
 8003530:	0ffffcff 	.word	0x0ffffcff
 8003534:	4bac      	ldr	r3, [pc, #688]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4aab      	ldr	r2, [pc, #684]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800353e:	6093      	str	r3, [r2, #8]
 8003540:	4ba9      	ldr	r3, [pc, #676]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003542:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354c:	49a6      	ldr	r1, [pc, #664]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800354e:	4313      	orrs	r3, r2
 8003550:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d010      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800355e:	4ba2      	ldr	r3, [pc, #648]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003564:	4aa0      	ldr	r2, [pc, #640]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800356e:	4b9e      	ldr	r3, [pc, #632]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003570:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	499b      	ldr	r1, [pc, #620]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800358c:	4b96      	ldr	r3, [pc, #600]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359a:	4993      	ldr	r1, [pc, #588]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ae:	4b8e      	ldr	r3, [pc, #568]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035bc:	498a      	ldr	r1, [pc, #552]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d0:	4b85      	ldr	r3, [pc, #532]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035de:	4982      	ldr	r1, [pc, #520]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035f2:	4b7d      	ldr	r3, [pc, #500]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	4979      	ldr	r1, [pc, #484]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003614:	4b74      	ldr	r3, [pc, #464]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361a:	f023 0203 	bic.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	4971      	ldr	r1, [pc, #452]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003636:	4b6c      	ldr	r3, [pc, #432]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	f023 020c 	bic.w	r2, r3, #12
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003644:	4968      	ldr	r1, [pc, #416]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003658:	4b63      	ldr	r3, [pc, #396]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	4960      	ldr	r1, [pc, #384]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800367a:	4b5b      	ldr	r3, [pc, #364]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003680:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003688:	4957      	ldr	r1, [pc, #348]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800369c:	4b52      	ldr	r3, [pc, #328]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	494f      	ldr	r1, [pc, #316]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036be:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	4946      	ldr	r1, [pc, #280]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036e0:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	493e      	ldr	r1, [pc, #248]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003702:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003710:	4935      	ldr	r1, [pc, #212]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003724:	4b30      	ldr	r3, [pc, #192]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003732:	492d      	ldr	r1, [pc, #180]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d011      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003746:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003754:	4924      	ldr	r1, [pc, #144]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003764:	d101      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003766:	2301      	movs	r3, #1
 8003768:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003776:	2301      	movs	r3, #1
 8003778:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003786:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003794:	4914      	ldr	r1, [pc, #80]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00b      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b8:	490b      	ldr	r1, [pc, #44]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00f      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037dc:	4902      	ldr	r1, [pc, #8]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037e4:	e002      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x494>
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037f8:	4b8a      	ldr	r3, [pc, #552]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	4986      	ldr	r1, [pc, #536]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800381c:	4b81      	ldr	r3, [pc, #516]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800381e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003822:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800382c:	497d      	ldr	r1, [pc, #500]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d006      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80d6 	beq.w	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003848:	4b76      	ldr	r3, [pc, #472]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a75      	ldr	r2, [pc, #468]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800384e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003854:	f7fd fc80 	bl	8001158 <HAL_GetTick>
 8003858:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800385c:	f7fd fc7c 	bl	8001158 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	; 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e195      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800386e:	4b6d      	ldr	r3, [pc, #436]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d021      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388a:	2b00      	cmp	r3, #0
 800388c:	d11d      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800388e:	4b65      	ldr	r3, [pc, #404]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003894:	0c1b      	lsrs	r3, r3, #16
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800389c:	4b61      	ldr	r3, [pc, #388]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800389e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a2:	0e1b      	lsrs	r3, r3, #24
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	019a      	lsls	r2, r3, #6
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	431a      	orrs	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	071b      	lsls	r3, r3, #28
 80038c2:	4958      	ldr	r1, [pc, #352]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d02e      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038f4:	d129      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038f6:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003904:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800390a:	0f1b      	lsrs	r3, r3, #28
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	019a      	lsls	r2, r3, #6
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	041b      	lsls	r3, r3, #16
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	061b      	lsls	r3, r3, #24
 8003924:	431a      	orrs	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	071b      	lsls	r3, r3, #28
 800392a:	493e      	ldr	r1, [pc, #248]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003932:	4b3c      	ldr	r3, [pc, #240]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003938:	f023 021f 	bic.w	r2, r3, #31
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	3b01      	subs	r3, #1
 8003942:	4938      	ldr	r1, [pc, #224]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01d      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003956:	4b33      	ldr	r3, [pc, #204]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800395c:	0e1b      	lsrs	r3, r3, #24
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003964:	4b2f      	ldr	r3, [pc, #188]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800396a:	0f1b      	lsrs	r3, r3, #28
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	019a      	lsls	r2, r3, #6
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	041b      	lsls	r3, r3, #16
 800397e:	431a      	orrs	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	061b      	lsls	r3, r3, #24
 8003984:	431a      	orrs	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	071b      	lsls	r3, r3, #28
 800398a:	4926      	ldr	r1, [pc, #152]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d011      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	019a      	lsls	r2, r3, #6
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	041b      	lsls	r3, r3, #16
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	071b      	lsls	r3, r3, #28
 80039ba:	491a      	ldr	r1, [pc, #104]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039c2:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ce:	f7fd fbc3 	bl	8001158 <HAL_GetTick>
 80039d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039d6:	f7fd fbbf 	bl	8001158 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b64      	cmp	r3, #100	; 0x64
 80039e2:	d901      	bls.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0d8      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039e8:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	f040 80ce 	bne.w	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a08      	ldr	r2, [pc, #32]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a08:	f7fd fba6 	bl	8001158 <HAL_GetTick>
 8003a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a10:	f7fd fba2 	bl	8001158 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d904      	bls.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e0bb      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a28:	4b5e      	ldr	r3, [pc, #376]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a34:	d0ec      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d02e      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d12a      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a5e:	4b51      	ldr	r3, [pc, #324]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a6c:	4b4d      	ldr	r3, [pc, #308]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	0f1b      	lsrs	r3, r3, #28
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	019a      	lsls	r2, r3, #6
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	061b      	lsls	r3, r3, #24
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	071b      	lsls	r3, r3, #28
 8003a92:	4944      	ldr	r1, [pc, #272]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a9a:	4b42      	ldr	r3, [pc, #264]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	493d      	ldr	r1, [pc, #244]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d022      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ac8:	d11d      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aca:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	0e1b      	lsrs	r3, r3, #24
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ad8:	4b32      	ldr	r3, [pc, #200]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	0f1b      	lsrs	r3, r3, #28
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	019a      	lsls	r2, r3, #6
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	431a      	orrs	r2, r3
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	061b      	lsls	r3, r3, #24
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	071b      	lsls	r3, r3, #28
 8003afe:	4929      	ldr	r1, [pc, #164]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d028      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b12:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	0e1b      	lsrs	r3, r3, #24
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b20:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	0c1b      	lsrs	r3, r3, #16
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	019a      	lsls	r2, r3, #6
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	041b      	lsls	r3, r3, #16
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	071b      	lsls	r3, r3, #28
 8003b46:	4917      	ldr	r1, [pc, #92]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b4e:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	4911      	ldr	r1, [pc, #68]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b70:	f7fd faf2 	bl	8001158 <HAL_GetTick>
 8003b74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b78:	f7fd faee 	bl	8001158 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d901      	bls.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e007      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b96:	d1ef      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800

08003ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e040      	b.n	8003c3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd f86e 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2224      	movs	r2, #36	; 0x24
 8003bd4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0201 	bic.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f82c 	bl	8003c44 <UART_SetConfig>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e022      	b.n	8003c3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fa84 	bl	800410c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fb0b 	bl	8004250 <UART_CheckIdleState>
 8003c3a:	4603      	mov	r3, r0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	4ba6      	ldr	r3, [pc, #664]	; (8003f08 <UART_SetConfig+0x2c4>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	6979      	ldr	r1, [r7, #20]
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a94      	ldr	r2, [pc, #592]	; (8003f0c <UART_SetConfig+0x2c8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d120      	bne.n	8003d02 <UART_SetConfig+0xbe>
 8003cc0:	4b93      	ldr	r3, [pc, #588]	; (8003f10 <UART_SetConfig+0x2cc>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d816      	bhi.n	8003cfc <UART_SetConfig+0xb8>
 8003cce:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <UART_SetConfig+0x90>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003ce5 	.word	0x08003ce5
 8003cd8:	08003cf1 	.word	0x08003cf1
 8003cdc:	08003ceb 	.word	0x08003ceb
 8003ce0:	08003cf7 	.word	0x08003cf7
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e150      	b.n	8003f8c <UART_SetConfig+0x348>
 8003cea:	2302      	movs	r3, #2
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e14d      	b.n	8003f8c <UART_SetConfig+0x348>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e14a      	b.n	8003f8c <UART_SetConfig+0x348>
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e147      	b.n	8003f8c <UART_SetConfig+0x348>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e144      	b.n	8003f8c <UART_SetConfig+0x348>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a83      	ldr	r2, [pc, #524]	; (8003f14 <UART_SetConfig+0x2d0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d132      	bne.n	8003d72 <UART_SetConfig+0x12e>
 8003d0c:	4b80      	ldr	r3, [pc, #512]	; (8003f10 <UART_SetConfig+0x2cc>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	d828      	bhi.n	8003d6c <UART_SetConfig+0x128>
 8003d1a:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <UART_SetConfig+0xdc>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d55 	.word	0x08003d55
 8003d24:	08003d6d 	.word	0x08003d6d
 8003d28:	08003d6d 	.word	0x08003d6d
 8003d2c:	08003d6d 	.word	0x08003d6d
 8003d30:	08003d61 	.word	0x08003d61
 8003d34:	08003d6d 	.word	0x08003d6d
 8003d38:	08003d6d 	.word	0x08003d6d
 8003d3c:	08003d6d 	.word	0x08003d6d
 8003d40:	08003d5b 	.word	0x08003d5b
 8003d44:	08003d6d 	.word	0x08003d6d
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003d6d 	.word	0x08003d6d
 8003d50:	08003d67 	.word	0x08003d67
 8003d54:	2300      	movs	r3, #0
 8003d56:	77fb      	strb	r3, [r7, #31]
 8003d58:	e118      	b.n	8003f8c <UART_SetConfig+0x348>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	77fb      	strb	r3, [r7, #31]
 8003d5e:	e115      	b.n	8003f8c <UART_SetConfig+0x348>
 8003d60:	2304      	movs	r3, #4
 8003d62:	77fb      	strb	r3, [r7, #31]
 8003d64:	e112      	b.n	8003f8c <UART_SetConfig+0x348>
 8003d66:	2308      	movs	r3, #8
 8003d68:	77fb      	strb	r3, [r7, #31]
 8003d6a:	e10f      	b.n	8003f8c <UART_SetConfig+0x348>
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	77fb      	strb	r3, [r7, #31]
 8003d70:	e10c      	b.n	8003f8c <UART_SetConfig+0x348>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a68      	ldr	r2, [pc, #416]	; (8003f18 <UART_SetConfig+0x2d4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d120      	bne.n	8003dbe <UART_SetConfig+0x17a>
 8003d7c:	4b64      	ldr	r3, [pc, #400]	; (8003f10 <UART_SetConfig+0x2cc>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d86:	2b30      	cmp	r3, #48	; 0x30
 8003d88:	d013      	beq.n	8003db2 <UART_SetConfig+0x16e>
 8003d8a:	2b30      	cmp	r3, #48	; 0x30
 8003d8c:	d814      	bhi.n	8003db8 <UART_SetConfig+0x174>
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d009      	beq.n	8003da6 <UART_SetConfig+0x162>
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d810      	bhi.n	8003db8 <UART_SetConfig+0x174>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <UART_SetConfig+0x15c>
 8003d9a:	2b10      	cmp	r3, #16
 8003d9c:	d006      	beq.n	8003dac <UART_SetConfig+0x168>
 8003d9e:	e00b      	b.n	8003db8 <UART_SetConfig+0x174>
 8003da0:	2300      	movs	r3, #0
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e0f2      	b.n	8003f8c <UART_SetConfig+0x348>
 8003da6:	2302      	movs	r3, #2
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e0ef      	b.n	8003f8c <UART_SetConfig+0x348>
 8003dac:	2304      	movs	r3, #4
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e0ec      	b.n	8003f8c <UART_SetConfig+0x348>
 8003db2:	2308      	movs	r3, #8
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e0e9      	b.n	8003f8c <UART_SetConfig+0x348>
 8003db8:	2310      	movs	r3, #16
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e0e6      	b.n	8003f8c <UART_SetConfig+0x348>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a56      	ldr	r2, [pc, #344]	; (8003f1c <UART_SetConfig+0x2d8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d120      	bne.n	8003e0a <UART_SetConfig+0x1c6>
 8003dc8:	4b51      	ldr	r3, [pc, #324]	; (8003f10 <UART_SetConfig+0x2cc>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003dd2:	2bc0      	cmp	r3, #192	; 0xc0
 8003dd4:	d013      	beq.n	8003dfe <UART_SetConfig+0x1ba>
 8003dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8003dd8:	d814      	bhi.n	8003e04 <UART_SetConfig+0x1c0>
 8003dda:	2b80      	cmp	r3, #128	; 0x80
 8003ddc:	d009      	beq.n	8003df2 <UART_SetConfig+0x1ae>
 8003dde:	2b80      	cmp	r3, #128	; 0x80
 8003de0:	d810      	bhi.n	8003e04 <UART_SetConfig+0x1c0>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <UART_SetConfig+0x1a8>
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d006      	beq.n	8003df8 <UART_SetConfig+0x1b4>
 8003dea:	e00b      	b.n	8003e04 <UART_SetConfig+0x1c0>
 8003dec:	2300      	movs	r3, #0
 8003dee:	77fb      	strb	r3, [r7, #31]
 8003df0:	e0cc      	b.n	8003f8c <UART_SetConfig+0x348>
 8003df2:	2302      	movs	r3, #2
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e0c9      	b.n	8003f8c <UART_SetConfig+0x348>
 8003df8:	2304      	movs	r3, #4
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e0c6      	b.n	8003f8c <UART_SetConfig+0x348>
 8003dfe:	2308      	movs	r3, #8
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e0c3      	b.n	8003f8c <UART_SetConfig+0x348>
 8003e04:	2310      	movs	r3, #16
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e0c0      	b.n	8003f8c <UART_SetConfig+0x348>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a44      	ldr	r2, [pc, #272]	; (8003f20 <UART_SetConfig+0x2dc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d125      	bne.n	8003e60 <UART_SetConfig+0x21c>
 8003e14:	4b3e      	ldr	r3, [pc, #248]	; (8003f10 <UART_SetConfig+0x2cc>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e22:	d017      	beq.n	8003e54 <UART_SetConfig+0x210>
 8003e24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e28:	d817      	bhi.n	8003e5a <UART_SetConfig+0x216>
 8003e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2e:	d00b      	beq.n	8003e48 <UART_SetConfig+0x204>
 8003e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e34:	d811      	bhi.n	8003e5a <UART_SetConfig+0x216>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <UART_SetConfig+0x1fe>
 8003e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3e:	d006      	beq.n	8003e4e <UART_SetConfig+0x20a>
 8003e40:	e00b      	b.n	8003e5a <UART_SetConfig+0x216>
 8003e42:	2300      	movs	r3, #0
 8003e44:	77fb      	strb	r3, [r7, #31]
 8003e46:	e0a1      	b.n	8003f8c <UART_SetConfig+0x348>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e09e      	b.n	8003f8c <UART_SetConfig+0x348>
 8003e4e:	2304      	movs	r3, #4
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	e09b      	b.n	8003f8c <UART_SetConfig+0x348>
 8003e54:	2308      	movs	r3, #8
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e098      	b.n	8003f8c <UART_SetConfig+0x348>
 8003e5a:	2310      	movs	r3, #16
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e095      	b.n	8003f8c <UART_SetConfig+0x348>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a2f      	ldr	r2, [pc, #188]	; (8003f24 <UART_SetConfig+0x2e0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d125      	bne.n	8003eb6 <UART_SetConfig+0x272>
 8003e6a:	4b29      	ldr	r3, [pc, #164]	; (8003f10 <UART_SetConfig+0x2cc>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e78:	d017      	beq.n	8003eaa <UART_SetConfig+0x266>
 8003e7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e7e:	d817      	bhi.n	8003eb0 <UART_SetConfig+0x26c>
 8003e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e84:	d00b      	beq.n	8003e9e <UART_SetConfig+0x25a>
 8003e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8a:	d811      	bhi.n	8003eb0 <UART_SetConfig+0x26c>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <UART_SetConfig+0x254>
 8003e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e94:	d006      	beq.n	8003ea4 <UART_SetConfig+0x260>
 8003e96:	e00b      	b.n	8003eb0 <UART_SetConfig+0x26c>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	77fb      	strb	r3, [r7, #31]
 8003e9c:	e076      	b.n	8003f8c <UART_SetConfig+0x348>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	77fb      	strb	r3, [r7, #31]
 8003ea2:	e073      	b.n	8003f8c <UART_SetConfig+0x348>
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e070      	b.n	8003f8c <UART_SetConfig+0x348>
 8003eaa:	2308      	movs	r3, #8
 8003eac:	77fb      	strb	r3, [r7, #31]
 8003eae:	e06d      	b.n	8003f8c <UART_SetConfig+0x348>
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e06a      	b.n	8003f8c <UART_SetConfig+0x348>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <UART_SetConfig+0x2e4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d138      	bne.n	8003f32 <UART_SetConfig+0x2ee>
 8003ec0:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <UART_SetConfig+0x2cc>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003eca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ece:	d017      	beq.n	8003f00 <UART_SetConfig+0x2bc>
 8003ed0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ed4:	d82a      	bhi.n	8003f2c <UART_SetConfig+0x2e8>
 8003ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eda:	d00b      	beq.n	8003ef4 <UART_SetConfig+0x2b0>
 8003edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee0:	d824      	bhi.n	8003f2c <UART_SetConfig+0x2e8>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <UART_SetConfig+0x2aa>
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eea:	d006      	beq.n	8003efa <UART_SetConfig+0x2b6>
 8003eec:	e01e      	b.n	8003f2c <UART_SetConfig+0x2e8>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	77fb      	strb	r3, [r7, #31]
 8003ef2:	e04b      	b.n	8003f8c <UART_SetConfig+0x348>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e048      	b.n	8003f8c <UART_SetConfig+0x348>
 8003efa:	2304      	movs	r3, #4
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e045      	b.n	8003f8c <UART_SetConfig+0x348>
 8003f00:	2308      	movs	r3, #8
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e042      	b.n	8003f8c <UART_SetConfig+0x348>
 8003f06:	bf00      	nop
 8003f08:	efff69f3 	.word	0xefff69f3
 8003f0c:	40011000 	.word	0x40011000
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40004400 	.word	0x40004400
 8003f18:	40004800 	.word	0x40004800
 8003f1c:	40004c00 	.word	0x40004c00
 8003f20:	40005000 	.word	0x40005000
 8003f24:	40011400 	.word	0x40011400
 8003f28:	40007800 	.word	0x40007800
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e02c      	b.n	8003f8c <UART_SetConfig+0x348>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a72      	ldr	r2, [pc, #456]	; (8004100 <UART_SetConfig+0x4bc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d125      	bne.n	8003f88 <UART_SetConfig+0x344>
 8003f3c:	4b71      	ldr	r3, [pc, #452]	; (8004104 <UART_SetConfig+0x4c0>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f4a:	d017      	beq.n	8003f7c <UART_SetConfig+0x338>
 8003f4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f50:	d817      	bhi.n	8003f82 <UART_SetConfig+0x33e>
 8003f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f56:	d00b      	beq.n	8003f70 <UART_SetConfig+0x32c>
 8003f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5c:	d811      	bhi.n	8003f82 <UART_SetConfig+0x33e>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <UART_SetConfig+0x326>
 8003f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f66:	d006      	beq.n	8003f76 <UART_SetConfig+0x332>
 8003f68:	e00b      	b.n	8003f82 <UART_SetConfig+0x33e>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	77fb      	strb	r3, [r7, #31]
 8003f6e:	e00d      	b.n	8003f8c <UART_SetConfig+0x348>
 8003f70:	2302      	movs	r3, #2
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e00a      	b.n	8003f8c <UART_SetConfig+0x348>
 8003f76:	2304      	movs	r3, #4
 8003f78:	77fb      	strb	r3, [r7, #31]
 8003f7a:	e007      	b.n	8003f8c <UART_SetConfig+0x348>
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	77fb      	strb	r3, [r7, #31]
 8003f80:	e004      	b.n	8003f8c <UART_SetConfig+0x348>
 8003f82:	2310      	movs	r3, #16
 8003f84:	77fb      	strb	r3, [r7, #31]
 8003f86:	e001      	b.n	8003f8c <UART_SetConfig+0x348>
 8003f88:	2310      	movs	r3, #16
 8003f8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f94:	d15b      	bne.n	800404e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003f96:	7ffb      	ldrb	r3, [r7, #31]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d828      	bhi.n	8003fee <UART_SetConfig+0x3aa>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <UART_SetConfig+0x360>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003fd1 	.word	0x08003fd1
 8003fac:	08003fd9 	.word	0x08003fd9
 8003fb0:	08003fef 	.word	0x08003fef
 8003fb4:	08003fdf 	.word	0x08003fdf
 8003fb8:	08003fef 	.word	0x08003fef
 8003fbc:	08003fef 	.word	0x08003fef
 8003fc0:	08003fef 	.word	0x08003fef
 8003fc4:	08003fe7 	.word	0x08003fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc8:	f7ff f99e 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 8003fcc:	61b8      	str	r0, [r7, #24]
        break;
 8003fce:	e013      	b.n	8003ff8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fd0:	f7ff f9ae 	bl	8003330 <HAL_RCC_GetPCLK2Freq>
 8003fd4:	61b8      	str	r0, [r7, #24]
        break;
 8003fd6:	e00f      	b.n	8003ff8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd8:	4b4b      	ldr	r3, [pc, #300]	; (8004108 <UART_SetConfig+0x4c4>)
 8003fda:	61bb      	str	r3, [r7, #24]
        break;
 8003fdc:	e00c      	b.n	8003ff8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fde:	f7ff f881 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 8003fe2:	61b8      	str	r0, [r7, #24]
        break;
 8003fe4:	e008      	b.n	8003ff8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fea:	61bb      	str	r3, [r7, #24]
        break;
 8003fec:	e004      	b.n	8003ff8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ff6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d074      	beq.n	80040e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	005a      	lsls	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	441a      	add	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004012:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b0f      	cmp	r3, #15
 8004018:	d916      	bls.n	8004048 <UART_SetConfig+0x404>
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004020:	d212      	bcs.n	8004048 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	b29b      	uxth	r3, r3
 8004026:	f023 030f 	bic.w	r3, r3, #15
 800402a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	b29b      	uxth	r3, r3
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	b29a      	uxth	r2, r3
 8004038:	89fb      	ldrh	r3, [r7, #14]
 800403a:	4313      	orrs	r3, r2
 800403c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	89fa      	ldrh	r2, [r7, #14]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	e04f      	b.n	80040e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	77bb      	strb	r3, [r7, #30]
 800404c:	e04c      	b.n	80040e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800404e:	7ffb      	ldrb	r3, [r7, #31]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d828      	bhi.n	80040a6 <UART_SetConfig+0x462>
 8004054:	a201      	add	r2, pc, #4	; (adr r2, 800405c <UART_SetConfig+0x418>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	08004081 	.word	0x08004081
 8004060:	08004089 	.word	0x08004089
 8004064:	08004091 	.word	0x08004091
 8004068:	080040a7 	.word	0x080040a7
 800406c:	08004097 	.word	0x08004097
 8004070:	080040a7 	.word	0x080040a7
 8004074:	080040a7 	.word	0x080040a7
 8004078:	080040a7 	.word	0x080040a7
 800407c:	0800409f 	.word	0x0800409f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004080:	f7ff f942 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 8004084:	61b8      	str	r0, [r7, #24]
        break;
 8004086:	e013      	b.n	80040b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004088:	f7ff f952 	bl	8003330 <HAL_RCC_GetPCLK2Freq>
 800408c:	61b8      	str	r0, [r7, #24]
        break;
 800408e:	e00f      	b.n	80040b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004090:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <UART_SetConfig+0x4c4>)
 8004092:	61bb      	str	r3, [r7, #24]
        break;
 8004094:	e00c      	b.n	80040b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004096:	f7ff f825 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 800409a:	61b8      	str	r0, [r7, #24]
        break;
 800409c:	e008      	b.n	80040b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800409e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a2:	61bb      	str	r3, [r7, #24]
        break;
 80040a4:	e004      	b.n	80040b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	77bb      	strb	r3, [r7, #30]
        break;
 80040ae:	bf00      	nop
    }

    if (pclk != 0U)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d018      	beq.n	80040e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	085a      	lsrs	r2, r3, #1
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	441a      	add	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b0f      	cmp	r3, #15
 80040ce:	d909      	bls.n	80040e4 <UART_SetConfig+0x4a0>
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d6:	d205      	bcs.n	80040e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	b29a      	uxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	e001      	b.n	80040e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40007c00 	.word	0x40007c00
 8004104:	40023800 	.word	0x40023800
 8004108:	00f42400 	.word	0x00f42400

0800410c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01a      	beq.n	8004222 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800420a:	d10a      	bne.n	8004222 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]
  }
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af02      	add	r7, sp, #8
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004260:	f7fc ff7a 	bl	8001158 <HAL_GetTick>
 8004264:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b08      	cmp	r3, #8
 8004272:	d10e      	bne.n	8004292 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f831 	bl	80042ea <UART_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e027      	b.n	80042e2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b04      	cmp	r3, #4
 800429e:	d10e      	bne.n	80042be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f81b 	bl	80042ea <UART_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e011      	b.n	80042e2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b09c      	sub	sp, #112	; 0x70
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	4613      	mov	r3, r2
 80042f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fa:	e0a7      	b.n	800444c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004302:	f000 80a3 	beq.w	800444c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004306:	f7fc ff27 	bl	8001158 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004312:	429a      	cmp	r2, r3
 8004314:	d302      	bcc.n	800431c <UART_WaitOnFlagUntilTimeout+0x32>
 8004316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004318:	2b00      	cmp	r3, #0
 800431a:	d13f      	bne.n	800439c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800432a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800432c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004330:	667b      	str	r3, [r7, #100]	; 0x64
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800433a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800433c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004340:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e6      	bne.n	800431c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3308      	adds	r3, #8
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	663b      	str	r3, [r7, #96]	; 0x60
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3308      	adds	r3, #8
 800436c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800436e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004370:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800437c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e5      	bne.n	800434e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e068      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d050      	beq.n	800444c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b8:	d148      	bne.n	800444c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
 80043e4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e6      	bne.n	80043c4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3308      	adds	r3, #8
 80043fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	613b      	str	r3, [r7, #16]
   return(result);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	66bb      	str	r3, [r7, #104]	; 0x68
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3308      	adds	r3, #8
 8004414:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004416:	623a      	str	r2, [r7, #32]
 8004418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	69f9      	ldr	r1, [r7, #28]
 800441c:	6a3a      	ldr	r2, [r7, #32]
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	61bb      	str	r3, [r7, #24]
   return(result);
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e5      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e010      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4013      	ands	r3, r2
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	429a      	cmp	r2, r3
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	429a      	cmp	r2, r3
 8004468:	f43f af48 	beq.w	80042fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3770      	adds	r7, #112	; 0x70
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004478:	b084      	sub	sp, #16
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	f107 001c 	add.w	r0, r7, #28
 8004486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	2b01      	cmp	r3, #1
 800448e:	d120      	bne.n	80044d2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	4b20      	ldr	r3, [pc, #128]	; (8004524 <USB_CoreInit+0xac>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d105      	bne.n	80044c6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa96 	bl	80049f8 <USB_CoreReset>
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	e010      	b.n	80044f4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fa8a 	bl	80049f8 <USB_CoreReset>
 80044e4:	4603      	mov	r3, r0
 80044e6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d10b      	bne.n	8004512 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f043 0206 	orr.w	r2, r3, #6
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f043 0220 	orr.w	r2, r3, #32
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004512:	7bfb      	ldrb	r3, [r7, #15]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800451e:	b004      	add	sp, #16
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	ffbdffbf 	.word	0xffbdffbf

08004528 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f023 0201 	bic.w	r2, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	460b      	mov	r3, r1
 8004554:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d115      	bne.n	8004598 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004578:	2001      	movs	r0, #1
 800457a:	f7fc fdf9 	bl	8001170 <HAL_Delay>
      ms++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3301      	adds	r3, #1
 8004582:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fa29 	bl	80049dc <USB_GetMode>
 800458a:	4603      	mov	r3, r0
 800458c:	2b01      	cmp	r3, #1
 800458e:	d01e      	beq.n	80045ce <USB_SetCurrentMode+0x84>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b31      	cmp	r3, #49	; 0x31
 8004594:	d9f0      	bls.n	8004578 <USB_SetCurrentMode+0x2e>
 8004596:	e01a      	b.n	80045ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d115      	bne.n	80045ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045aa:	2001      	movs	r0, #1
 80045ac:	f7fc fde0 	bl	8001170 <HAL_Delay>
      ms++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3301      	adds	r3, #1
 80045b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fa10 	bl	80049dc <USB_GetMode>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <USB_SetCurrentMode+0x84>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b31      	cmp	r3, #49	; 0x31
 80045c6:	d9f0      	bls.n	80045aa <USB_SetCurrentMode+0x60>
 80045c8:	e001      	b.n	80045ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e005      	b.n	80045da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b32      	cmp	r3, #50	; 0x32
 80045d2:	d101      	bne.n	80045d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045e4:	b084      	sub	sp, #16
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b086      	sub	sp, #24
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045fe:	2300      	movs	r3, #0
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	e009      	b.n	8004618 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	3340      	adds	r3, #64	; 0x40
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	2200      	movs	r2, #0
 8004610:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	3301      	adds	r3, #1
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	2b0e      	cmp	r3, #14
 800461c:	d9f2      	bls.n	8004604 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800461e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d11c      	bne.n	800465e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004632:	f043 0302 	orr.w	r3, r3, #2
 8004636:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	e005      	b.n	800466a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004670:	461a      	mov	r2, r3
 8004672:	2300      	movs	r3, #0
 8004674:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467c:	4619      	mov	r1, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004684:	461a      	mov	r2, r3
 8004686:	680b      	ldr	r3, [r1, #0]
 8004688:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10c      	bne.n	80046aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d104      	bne.n	80046a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004696:	2100      	movs	r1, #0
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f965 	bl	8004968 <USB_SetDevSpeed>
 800469e:	e008      	b.n	80046b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046a0:	2101      	movs	r1, #1
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f960 	bl	8004968 <USB_SetDevSpeed>
 80046a8:	e003      	b.n	80046b2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046aa:	2103      	movs	r1, #3
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f95b 	bl	8004968 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046b2:	2110      	movs	r1, #16
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f8f3 	bl	80048a0 <USB_FlushTxFifo>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f91f 	bl	8004908 <USB_FlushRxFifo>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046da:	461a      	mov	r2, r3
 80046dc:	2300      	movs	r3, #0
 80046de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e6:	461a      	mov	r2, r3
 80046e8:	2300      	movs	r3, #0
 80046ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f2:	461a      	mov	r2, r3
 80046f4:	2300      	movs	r3, #0
 80046f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	e043      	b.n	8004786 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004710:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004714:	d118      	bne.n	8004748 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10a      	bne.n	8004732 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	461a      	mov	r2, r3
 800472a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e013      	b.n	800475a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	461a      	mov	r2, r3
 8004740:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e008      	b.n	800475a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004754:	461a      	mov	r2, r3
 8004756:	2300      	movs	r3, #0
 8004758:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004766:	461a      	mov	r2, r3
 8004768:	2300      	movs	r3, #0
 800476a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004778:	461a      	mov	r2, r3
 800477a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800477e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	3301      	adds	r3, #1
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	429a      	cmp	r2, r3
 800478c:	d3b7      	bcc.n	80046fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800478e:	2300      	movs	r3, #0
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	e043      	b.n	800481c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047aa:	d118      	bne.n	80047de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047be:	461a      	mov	r2, r3
 80047c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	e013      	b.n	80047f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	461a      	mov	r2, r3
 80047d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	e008      	b.n	80047f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ea:	461a      	mov	r2, r3
 80047ec:	2300      	movs	r3, #0
 80047ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fc:	461a      	mov	r2, r3
 80047fe:	2300      	movs	r3, #0
 8004800:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480e:	461a      	mov	r2, r3
 8004810:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004814:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	3301      	adds	r3, #1
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	429a      	cmp	r2, r3
 8004822:	d3b7      	bcc.n	8004794 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004832:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004836:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004844:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	2b00      	cmp	r3, #0
 800484a:	d105      	bne.n	8004858 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f043 0210 	orr.w	r2, r3, #16
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <USB_DevInit+0x2b4>)
 800485e:	4313      	orrs	r3, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d005      	beq.n	8004876 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f043 0208 	orr.w	r2, r3, #8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d105      	bne.n	8004888 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <USB_DevInit+0x2b8>)
 8004882:	4313      	orrs	r3, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004888:	7dfb      	ldrb	r3, [r7, #23]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004894:	b004      	add	sp, #16
 8004896:	4770      	bx	lr
 8004898:	803c3800 	.word	0x803c3800
 800489c:	40000004 	.word	0x40000004

080048a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3301      	adds	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a13      	ldr	r2, [pc, #76]	; (8004904 <USB_FlushTxFifo+0x64>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e01b      	b.n	80048f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	daf2      	bge.n	80048ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	019b      	lsls	r3, r3, #6
 80048d0:	f043 0220 	orr.w	r2, r3, #32
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3301      	adds	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4a08      	ldr	r2, [pc, #32]	; (8004904 <USB_FlushTxFifo+0x64>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e006      	b.n	80048f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d0f0      	beq.n	80048d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	00030d40 	.word	0x00030d40

08004908 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3301      	adds	r3, #1
 8004918:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a11      	ldr	r2, [pc, #68]	; (8004964 <USB_FlushRxFifo+0x5c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e018      	b.n	8004958 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	daf2      	bge.n	8004914 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2210      	movs	r2, #16
 8004936:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3301      	adds	r3, #1
 800493c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a08      	ldr	r2, [pc, #32]	; (8004964 <USB_FlushRxFifo+0x5c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e006      	b.n	8004958 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0310 	and.w	r3, r3, #16
 8004952:	2b10      	cmp	r3, #16
 8004954:	d0f0      	beq.n	8004938 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	00030d40 	.word	0x00030d40

08004968 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004988:	4313      	orrs	r3, r2
 800498a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049b4:	f023 0303 	bic.w	r3, r3, #3
 80049b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049c8:	f043 0302 	orr.w	r3, r3, #2
 80049cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0301 	and.w	r3, r3, #1
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3301      	adds	r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4a13      	ldr	r2, [pc, #76]	; (8004a5c <USB_CoreReset+0x64>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e01b      	b.n	8004a4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	daf2      	bge.n	8004a04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f043 0201 	orr.w	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3301      	adds	r3, #1
 8004a32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <USB_CoreReset+0x64>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d901      	bls.n	8004a40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e006      	b.n	8004a4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d0f0      	beq.n	8004a2e <USB_CoreReset+0x36>

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	00030d40 	.word	0x00030d40

08004a60 <init>:

int world1[LINES][COLUMNS];
int world2[LINES][COLUMNS];

void init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
    srand (time(NULL));
 8004a66:	2000      	movs	r0, #0
 8004a68:	f000 fb74 	bl	8005154 <time>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4613      	mov	r3, r2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fb02 	bl	800507c <srand>
     for (int i = 0; i < LINES; i++)
 8004a78:	2300      	movs	r3, #0
 8004a7a:	607b      	str	r3, [r7, #4]
 8004a7c:	e01b      	b.n	8004ab6 <init+0x56>
    {
        for (int j = 0; j < COLUMNS; j++)
 8004a7e:	2300      	movs	r3, #0
 8004a80:	603b      	str	r3, [r7, #0]
 8004a82:	e012      	b.n	8004aaa <init+0x4a>
        {
            world1[i][j] = rand()%2;
 8004a84:	f000 fb28 	bl	80050d8 <rand>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	bfb8      	it	lt
 8004a92:	425b      	neglt	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	480c      	ldr	r0, [pc, #48]	; (8004ac8 <init+0x68>)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	01d9      	lsls	r1, r3, #7
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	440b      	add	r3, r1
 8004aa0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (int j = 0; j < COLUMNS; j++)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	603b      	str	r3, [r7, #0]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b7f      	cmp	r3, #127	; 0x7f
 8004aae:	dde9      	ble.n	8004a84 <init+0x24>
     for (int i = 0; i < LINES; i++)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	607b      	str	r3, [r7, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b1f      	cmp	r3, #31
 8004aba:	dde0      	ble.n	8004a7e <init+0x1e>
        }
    }
}
 8004abc:	bf00      	nop
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	200008a8 	.word	0x200008a8

08004acc <show>:

void show(void)
{ SSD1306_COLOR color;
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
    for (int i = 0; i < LINES ; i++)
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	e021      	b.n	8004b1c <show+0x50>
    {
        for (int j = 0; j < COLUMNS; j++)
 8004ad8:	2300      	movs	r3, #0
 8004ada:	607b      	str	r3, [r7, #4]
 8004adc:	e018      	b.n	8004b10 <show+0x44>
        {
        	if(world1[i][j])
 8004ade:	4913      	ldr	r1, [pc, #76]	; (8004b2c <show+0x60>)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	01da      	lsls	r2, r3, #7
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <show+0x2a>
        	color =  White;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
 8004af4:	e001      	b.n	8004afa <show+0x2e>
        	else
        		color =  Black;
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]
        	ssd1306_DrawPixel(j, i, color);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	b2d1      	uxtb	r1, r2
 8004b02:	7bfa      	ldrb	r2, [r7, #15]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fa01 	bl	8004f0c <ssd1306_DrawPixel>
        for (int j = 0; j < COLUMNS; j++)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	607b      	str	r3, [r7, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b7f      	cmp	r3, #127	; 0x7f
 8004b14:	dde3      	ble.n	8004ade <show+0x12>
    for (int i = 0; i < LINES ; i++)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2b1f      	cmp	r3, #31
 8004b20:	ddda      	ble.n	8004ad8 <show+0xc>
        }
    }

}
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	200008a8 	.word	0x200008a8

08004b30 <norm>:

int norm(int n, int limit)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
    return (n+limit)%limit;
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	4413      	add	r3, r2
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	fb93 f2f2 	sdiv	r2, r3, r2
 8004b46:	6839      	ldr	r1, [r7, #0]
 8004b48:	fb01 f202 	mul.w	r2, r1, r2
 8004b4c:	1a9b      	subs	r3, r3, r2
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <count_of_neighbor>:

int count_of_neighbor(int y, int x)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
    int neighbor = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
    for(int i = - 1; i <= 1; i++)
 8004b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6e:	61bb      	str	r3, [r7, #24]
 8004b70:	e026      	b.n	8004bc0 <count_of_neighbor+0x64>
    {
        for(int j = - 1; j <= 1; j++)
 8004b72:	f04f 33ff 	mov.w	r3, #4294967295
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	e01c      	b.n	8004bb4 <count_of_neighbor+0x58>
        {
         int coorx = norm(x+i, COLUMNS);
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	4413      	add	r3, r2
 8004b80:	2180      	movs	r1, #128	; 0x80
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff ffd4 	bl	8004b30 <norm>
 8004b88:	6138      	str	r0, [r7, #16]
         int coory = norm(y+j, LINES);
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	4413      	add	r3, r2
 8004b90:	2120      	movs	r1, #32
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff ffcc 	bl	8004b30 <norm>
 8004b98:	60f8      	str	r0, [r7, #12]

         neighbor += world1[coory][coorx];
 8004b9a:	4912      	ldr	r1, [pc, #72]	; (8004be4 <count_of_neighbor+0x88>)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	01da      	lsls	r2, r3, #7
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	61fb      	str	r3, [r7, #28]
        for(int j = - 1; j <= 1; j++)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	dddf      	ble.n	8004b7a <count_of_neighbor+0x1e>
    for(int i = - 1; i <= 1; i++)
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	61bb      	str	r3, [r7, #24]
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	ddd5      	ble.n	8004b72 <count_of_neighbor+0x16>
        }
    }
    neighbor -=world1[y][x];
 8004bc6:	4907      	ldr	r1, [pc, #28]	; (8004be4 <count_of_neighbor+0x88>)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	01da      	lsls	r2, r3, #7
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	61fb      	str	r3, [r7, #28]

    return neighbor;
 8004bda:	69fb      	ldr	r3, [r7, #28]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	200008a8 	.word	0x200008a8

08004be8 <cell_will_live>:

int cell_will_live(int y, int x)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
    int neighbor = count_of_neighbor(y,x);
 8004bf2:	6839      	ldr	r1, [r7, #0]
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff ffb1 	bl	8004b5c <count_of_neighbor>
 8004bfa:	60f8      	str	r0, [r7, #12]

    if(neighbor == 2 || neighbor == 3)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d002      	beq.n	8004c08 <cell_will_live+0x20>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d101      	bne.n	8004c0c <cell_will_live+0x24>
    {
        return 1;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <cell_will_live+0x26>
    }
    else
    {
        return 0;
 8004c0c:	2300      	movs	r3, #0
    }
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <cell_will_born>:

int cell_will_born(int y, int x)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
    int neighbor = count_of_neighbor(y,x);
 8004c20:	6839      	ldr	r1, [r7, #0]
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff ff9a 	bl	8004b5c <count_of_neighbor>
 8004c28:	60f8      	str	r0, [r7, #12]
    if(neighbor == 3 )
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d101      	bne.n	8004c34 <cell_will_born+0x1e>
    {
        return 1;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <cell_will_born+0x20>
    }
    else
    {
        return 0;
 8004c34:	2300      	movs	r3, #0
    }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <cell_next_state>:

int cell_next_state(int y,int x)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
    if(world1[y][x] == 1)
 8004c4a:	490c      	ldr	r1, [pc, #48]	; (8004c7c <cell_next_state+0x3c>)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	01da      	lsls	r2, r3, #7
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	4413      	add	r3, r2
 8004c54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d105      	bne.n	8004c68 <cell_next_state+0x28>
    {
       return cell_will_live(y,x);
 8004c5c:	6839      	ldr	r1, [r7, #0]
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff ffc2 	bl	8004be8 <cell_will_live>
 8004c64:	4603      	mov	r3, r0
 8004c66:	e004      	b.n	8004c72 <cell_next_state+0x32>
    }
    else
    {
        return cell_will_born(y,x);
 8004c68:	6839      	ldr	r1, [r7, #0]
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff ffd3 	bl	8004c16 <cell_will_born>
 8004c70:	4603      	mov	r3, r0
    }
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200008a8 	.word	0x200008a8

08004c80 <fill_next_generation>:

void fill_next_generation(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
    for(int i=0;i < LINES;i++)
 8004c86:	2300      	movs	r3, #0
 8004c88:	607b      	str	r3, [r7, #4]
 8004c8a:	e017      	b.n	8004cbc <fill_next_generation+0x3c>
    {
        for( int j=0; j<COLUMNS; j++)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	e00e      	b.n	8004cb0 <fill_next_generation+0x30>
        {
            world2[i][j] = cell_next_state(i,j);
 8004c92:	6839      	ldr	r1, [r7, #0]
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff ffd3 	bl	8004c40 <cell_next_state>
 8004c9a:	4601      	mov	r1, r0
 8004c9c:	480b      	ldr	r0, [pc, #44]	; (8004ccc <fill_next_generation+0x4c>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	01da      	lsls	r2, r3, #7
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for( int j=0; j<COLUMNS; j++)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	3301      	adds	r3, #1
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8004cb4:	dded      	ble.n	8004c92 <fill_next_generation+0x12>
    for(int i=0;i < LINES;i++)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	607b      	str	r3, [r7, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b1f      	cmp	r3, #31
 8004cc0:	dde4      	ble.n	8004c8c <fill_next_generation+0xc>
        }
    }
}
 8004cc2:	bf00      	nop
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	200048a8 	.word	0x200048a8

08004cd0 <update_generation>:

void update_generation(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
    fill_next_generation();
 8004cd6:	f7ff ffd3 	bl	8004c80 <fill_next_generation>

    for(int i=0;i < LINES;i++)
 8004cda:	2300      	movs	r3, #0
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	e019      	b.n	8004d14 <update_generation+0x44>
    {
        for( int j=0; j<COLUMNS; j++)
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	e010      	b.n	8004d08 <update_generation+0x38>
        {
            world1[i][j] = world2[i][j];
 8004ce6:	490f      	ldr	r1, [pc, #60]	; (8004d24 <update_generation+0x54>)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	01da      	lsls	r2, r3, #7
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8004cf4:	480c      	ldr	r0, [pc, #48]	; (8004d28 <update_generation+0x58>)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	01d9      	lsls	r1, r3, #7
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	440b      	add	r3, r1
 8004cfe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for( int j=0; j<COLUMNS; j++)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	3301      	adds	r3, #1
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d0c:	ddeb      	ble.n	8004ce6 <update_generation+0x16>
    for(int i=0;i < LINES;i++)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3301      	adds	r3, #1
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b1f      	cmp	r3, #31
 8004d18:	dde2      	ble.n	8004ce0 <update_generation+0x10>
        }
    }
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	200048a8 	.word	0x200048a8
 8004d28:	200008a8 	.word	0x200008a8

08004d2c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af04      	add	r7, sp, #16
 8004d42:	4603      	mov	r3, r0
 8004d44:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004d46:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4a:	9302      	str	r3, [sp, #8]
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	1dfb      	adds	r3, r7, #7
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	2301      	movs	r3, #1
 8004d56:	2200      	movs	r2, #0
 8004d58:	2178      	movs	r1, #120	; 0x78
 8004d5a:	4803      	ldr	r0, [pc, #12]	; (8004d68 <ssd1306_WriteCommand+0x2c>)
 8004d5c:	f7fd f88e 	bl	8001e7c <HAL_I2C_Mem_Write>
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	200002b4 	.word	0x200002b4

08004d6c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af04      	add	r7, sp, #16
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7e:	9202      	str	r2, [sp, #8]
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	2301      	movs	r3, #1
 8004d88:	2240      	movs	r2, #64	; 0x40
 8004d8a:	2178      	movs	r1, #120	; 0x78
 8004d8c:	4803      	ldr	r0, [pc, #12]	; (8004d9c <ssd1306_WriteData+0x30>)
 8004d8e:	f7fd f875 	bl	8001e7c <HAL_I2C_Mem_Write>
}
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	200002b4 	.word	0x200002b4

08004da0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004da4:	f7ff ffc2 	bl	8004d2c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004da8:	2064      	movs	r0, #100	; 0x64
 8004daa:	f7fc f9e1 	bl	8001170 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004dae:	2000      	movs	r0, #0
 8004db0:	f000 f914 	bl	8004fdc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004db4:	2020      	movs	r0, #32
 8004db6:	f7ff ffc1 	bl	8004d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f7ff ffbe 	bl	8004d3c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004dc0:	20b0      	movs	r0, #176	; 0xb0
 8004dc2:	f7ff ffbb 	bl	8004d3c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004dc6:	20c8      	movs	r0, #200	; 0xc8
 8004dc8:	f7ff ffb8 	bl	8004d3c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004dcc:	2000      	movs	r0, #0
 8004dce:	f7ff ffb5 	bl	8004d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004dd2:	2010      	movs	r0, #16
 8004dd4:	f7ff ffb2 	bl	8004d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004dd8:	2040      	movs	r0, #64	; 0x40
 8004dda:	f7ff ffaf 	bl	8004d3c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004dde:	20ff      	movs	r0, #255	; 0xff
 8004de0:	f000 f8e8 	bl	8004fb4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004de4:	20a1      	movs	r0, #161	; 0xa1
 8004de6:	f7ff ffa9 	bl	8004d3c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004dea:	20a6      	movs	r0, #166	; 0xa6
 8004dec:	f7ff ffa6 	bl	8004d3c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004df0:	20a8      	movs	r0, #168	; 0xa8
 8004df2:	f7ff ffa3 	bl	8004d3c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8004df6:	201f      	movs	r0, #31
 8004df8:	f7ff ffa0 	bl	8004d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004dfc:	20a4      	movs	r0, #164	; 0xa4
 8004dfe:	f7ff ff9d 	bl	8004d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004e02:	20d3      	movs	r0, #211	; 0xd3
 8004e04:	f7ff ff9a 	bl	8004d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004e08:	2000      	movs	r0, #0
 8004e0a:	f7ff ff97 	bl	8004d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004e0e:	20d5      	movs	r0, #213	; 0xd5
 8004e10:	f7ff ff94 	bl	8004d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004e14:	20f0      	movs	r0, #240	; 0xf0
 8004e16:	f7ff ff91 	bl	8004d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004e1a:	20d9      	movs	r0, #217	; 0xd9
 8004e1c:	f7ff ff8e 	bl	8004d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004e20:	2022      	movs	r0, #34	; 0x22
 8004e22:	f7ff ff8b 	bl	8004d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004e26:	20da      	movs	r0, #218	; 0xda
 8004e28:	f7ff ff88 	bl	8004d3c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8004e2c:	2002      	movs	r0, #2
 8004e2e:	f7ff ff85 	bl	8004d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004e32:	20db      	movs	r0, #219	; 0xdb
 8004e34:	f7ff ff82 	bl	8004d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004e38:	2020      	movs	r0, #32
 8004e3a:	f7ff ff7f 	bl	8004d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004e3e:	208d      	movs	r0, #141	; 0x8d
 8004e40:	f7ff ff7c 	bl	8004d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004e44:	2014      	movs	r0, #20
 8004e46:	f7ff ff79 	bl	8004d3c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	f000 f8c6 	bl	8004fdc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004e50:	2000      	movs	r0, #0
 8004e52:	f000 f80f 	bl	8004e74 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004e56:	f000 f831 	bl	8004ebc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <ssd1306_Init+0xd0>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004e60:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <ssd1306_Init+0xd0>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004e66:	4b02      	ldr	r3, [pc, #8]	; (8004e70 <ssd1306_Init+0xd0>)
 8004e68:	2201      	movs	r2, #1
 8004e6a:	711a      	strb	r2, [r3, #4]
}
 8004e6c:	bf00      	nop
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20008aa8 	.word	0x20008aa8

08004e74 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	e00d      	b.n	8004ea0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <ssd1306_Fill+0x1a>
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	e000      	b.n	8004e90 <ssd1306_Fill+0x1c>
 8004e8e:	21ff      	movs	r1, #255	; 0xff
 8004e90:	4a09      	ldr	r2, [pc, #36]	; (8004eb8 <ssd1306_Fill+0x44>)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4413      	add	r3, r2
 8004e96:	460a      	mov	r2, r1
 8004e98:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea6:	d3ed      	bcc.n	8004e84 <ssd1306_Fill+0x10>
    }
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	200088a8 	.word	0x200088a8

08004ebc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/4; i++) {
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	71fb      	strb	r3, [r7, #7]
 8004ec6:	e016      	b.n	8004ef6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	3b50      	subs	r3, #80	; 0x50
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff ff34 	bl	8004d3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	f7ff ff31 	bl	8004d3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004eda:	2010      	movs	r0, #16
 8004edc:	f7ff ff2e 	bl	8004d3c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	01db      	lsls	r3, r3, #7
 8004ee4:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <ssd1306_UpdateScreen+0x4c>)
 8004ee6:	4413      	add	r3, r2
 8004ee8:	2180      	movs	r1, #128	; 0x80
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff ff3e 	bl	8004d6c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/4; i++) {
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	71fb      	strb	r3, [r7, #7]
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	2b07      	cmp	r3, #7
 8004efa:	d9e5      	bls.n	8004ec8 <ssd1306_UpdateScreen+0xc>
    }
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	200088a8 	.word	0x200088a8

08004f0c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	71fb      	strb	r3, [r7, #7]
 8004f16:	460b      	mov	r3, r1
 8004f18:	71bb      	strb	r3, [r7, #6]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	db3d      	blt.n	8004fa2 <ssd1306_DrawPixel+0x96>
 8004f26:	79bb      	ldrb	r3, [r7, #6]
 8004f28:	2b1f      	cmp	r3, #31
 8004f2a:	d83a      	bhi.n	8004fa2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004f2c:	797b      	ldrb	r3, [r7, #5]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d11a      	bne.n	8004f68 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004f32:	79fa      	ldrb	r2, [r7, #7]
 8004f34:	79bb      	ldrb	r3, [r7, #6]
 8004f36:	08db      	lsrs	r3, r3, #3
 8004f38:	b2d8      	uxtb	r0, r3
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	01db      	lsls	r3, r3, #7
 8004f3e:	4413      	add	r3, r2
 8004f40:	4a1b      	ldr	r2, [pc, #108]	; (8004fb0 <ssd1306_DrawPixel+0xa4>)
 8004f42:	5cd3      	ldrb	r3, [r2, r3]
 8004f44:	b25a      	sxtb	r2, r3
 8004f46:	79bb      	ldrb	r3, [r7, #6]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f52:	b25b      	sxtb	r3, r3
 8004f54:	4313      	orrs	r3, r2
 8004f56:	b259      	sxtb	r1, r3
 8004f58:	79fa      	ldrb	r2, [r7, #7]
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	01db      	lsls	r3, r3, #7
 8004f5e:	4413      	add	r3, r2
 8004f60:	b2c9      	uxtb	r1, r1
 8004f62:	4a13      	ldr	r2, [pc, #76]	; (8004fb0 <ssd1306_DrawPixel+0xa4>)
 8004f64:	54d1      	strb	r1, [r2, r3]
 8004f66:	e01d      	b.n	8004fa4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004f68:	79fa      	ldrb	r2, [r7, #7]
 8004f6a:	79bb      	ldrb	r3, [r7, #6]
 8004f6c:	08db      	lsrs	r3, r3, #3
 8004f6e:	b2d8      	uxtb	r0, r3
 8004f70:	4603      	mov	r3, r0
 8004f72:	01db      	lsls	r3, r3, #7
 8004f74:	4413      	add	r3, r2
 8004f76:	4a0e      	ldr	r2, [pc, #56]	; (8004fb0 <ssd1306_DrawPixel+0xa4>)
 8004f78:	5cd3      	ldrb	r3, [r2, r3]
 8004f7a:	b25a      	sxtb	r2, r3
 8004f7c:	79bb      	ldrb	r3, [r7, #6]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	2101      	movs	r1, #1
 8004f84:	fa01 f303 	lsl.w	r3, r1, r3
 8004f88:	b25b      	sxtb	r3, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	b25b      	sxtb	r3, r3
 8004f8e:	4013      	ands	r3, r2
 8004f90:	b259      	sxtb	r1, r3
 8004f92:	79fa      	ldrb	r2, [r7, #7]
 8004f94:	4603      	mov	r3, r0
 8004f96:	01db      	lsls	r3, r3, #7
 8004f98:	4413      	add	r3, r2
 8004f9a:	b2c9      	uxtb	r1, r1
 8004f9c:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <ssd1306_DrawPixel+0xa4>)
 8004f9e:	54d1      	strb	r1, [r2, r3]
 8004fa0:	e000      	b.n	8004fa4 <ssd1306_DrawPixel+0x98>
        return;
 8004fa2:	bf00      	nop
    }
}
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	200088a8 	.word	0x200088a8

08004fb4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004fbe:	2381      	movs	r3, #129	; 0x81
 8004fc0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff feb9 	bl	8004d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff feb5 	bl	8004d3c <ssd1306_WriteCommand>
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004fec:	23af      	movs	r3, #175	; 0xaf
 8004fee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004ff0:	4b08      	ldr	r3, [pc, #32]	; (8005014 <ssd1306_SetDisplayOn+0x38>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	715a      	strb	r2, [r3, #5]
 8004ff6:	e004      	b.n	8005002 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004ff8:	23ae      	movs	r3, #174	; 0xae
 8004ffa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004ffc:	4b05      	ldr	r3, [pc, #20]	; (8005014 <ssd1306_SetDisplayOn+0x38>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fe99 	bl	8004d3c <ssd1306_WriteCommand>
}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20008aa8 	.word	0x20008aa8

08005018 <__errno>:
 8005018:	4b01      	ldr	r3, [pc, #4]	; (8005020 <__errno+0x8>)
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	2000000c 	.word	0x2000000c

08005024 <__libc_init_array>:
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	4d0d      	ldr	r5, [pc, #52]	; (800505c <__libc_init_array+0x38>)
 8005028:	4c0d      	ldr	r4, [pc, #52]	; (8005060 <__libc_init_array+0x3c>)
 800502a:	1b64      	subs	r4, r4, r5
 800502c:	10a4      	asrs	r4, r4, #2
 800502e:	2600      	movs	r6, #0
 8005030:	42a6      	cmp	r6, r4
 8005032:	d109      	bne.n	8005048 <__libc_init_array+0x24>
 8005034:	4d0b      	ldr	r5, [pc, #44]	; (8005064 <__libc_init_array+0x40>)
 8005036:	4c0c      	ldr	r4, [pc, #48]	; (8005068 <__libc_init_array+0x44>)
 8005038:	f001 f8ba 	bl	80061b0 <_init>
 800503c:	1b64      	subs	r4, r4, r5
 800503e:	10a4      	asrs	r4, r4, #2
 8005040:	2600      	movs	r6, #0
 8005042:	42a6      	cmp	r6, r4
 8005044:	d105      	bne.n	8005052 <__libc_init_array+0x2e>
 8005046:	bd70      	pop	{r4, r5, r6, pc}
 8005048:	f855 3b04 	ldr.w	r3, [r5], #4
 800504c:	4798      	blx	r3
 800504e:	3601      	adds	r6, #1
 8005050:	e7ee      	b.n	8005030 <__libc_init_array+0xc>
 8005052:	f855 3b04 	ldr.w	r3, [r5], #4
 8005056:	4798      	blx	r3
 8005058:	3601      	adds	r6, #1
 800505a:	e7f2      	b.n	8005042 <__libc_init_array+0x1e>
 800505c:	08006330 	.word	0x08006330
 8005060:	08006330 	.word	0x08006330
 8005064:	08006330 	.word	0x08006330
 8005068:	08006334 	.word	0x08006334

0800506c <memset>:
 800506c:	4402      	add	r2, r0
 800506e:	4603      	mov	r3, r0
 8005070:	4293      	cmp	r3, r2
 8005072:	d100      	bne.n	8005076 <memset+0xa>
 8005074:	4770      	bx	lr
 8005076:	f803 1b01 	strb.w	r1, [r3], #1
 800507a:	e7f9      	b.n	8005070 <memset+0x4>

0800507c <srand>:
 800507c:	b538      	push	{r3, r4, r5, lr}
 800507e:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <srand+0x44>)
 8005080:	681d      	ldr	r5, [r3, #0]
 8005082:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005084:	4604      	mov	r4, r0
 8005086:	b9b3      	cbnz	r3, 80050b6 <srand+0x3a>
 8005088:	2018      	movs	r0, #24
 800508a:	f000 f8bf 	bl	800520c <malloc>
 800508e:	4602      	mov	r2, r0
 8005090:	63a8      	str	r0, [r5, #56]	; 0x38
 8005092:	b920      	cbnz	r0, 800509e <srand+0x22>
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <srand+0x48>)
 8005096:	480c      	ldr	r0, [pc, #48]	; (80050c8 <srand+0x4c>)
 8005098:	2142      	movs	r1, #66	; 0x42
 800509a:	f000 f875 	bl	8005188 <__assert_func>
 800509e:	490b      	ldr	r1, [pc, #44]	; (80050cc <srand+0x50>)
 80050a0:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <srand+0x54>)
 80050a2:	e9c0 1300 	strd	r1, r3, [r0]
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <srand+0x58>)
 80050a8:	6083      	str	r3, [r0, #8]
 80050aa:	230b      	movs	r3, #11
 80050ac:	8183      	strh	r3, [r0, #12]
 80050ae:	2100      	movs	r1, #0
 80050b0:	2001      	movs	r0, #1
 80050b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80050b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80050b8:	2200      	movs	r2, #0
 80050ba:	611c      	str	r4, [r3, #16]
 80050bc:	615a      	str	r2, [r3, #20]
 80050be:	bd38      	pop	{r3, r4, r5, pc}
 80050c0:	2000000c 	.word	0x2000000c
 80050c4:	080061e4 	.word	0x080061e4
 80050c8:	080061fb 	.word	0x080061fb
 80050cc:	abcd330e 	.word	0xabcd330e
 80050d0:	e66d1234 	.word	0xe66d1234
 80050d4:	0005deec 	.word	0x0005deec

080050d8 <rand>:
 80050d8:	4b16      	ldr	r3, [pc, #88]	; (8005134 <rand+0x5c>)
 80050da:	b510      	push	{r4, lr}
 80050dc:	681c      	ldr	r4, [r3, #0]
 80050de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050e0:	b9b3      	cbnz	r3, 8005110 <rand+0x38>
 80050e2:	2018      	movs	r0, #24
 80050e4:	f000 f892 	bl	800520c <malloc>
 80050e8:	63a0      	str	r0, [r4, #56]	; 0x38
 80050ea:	b928      	cbnz	r0, 80050f8 <rand+0x20>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <rand+0x60>)
 80050f0:	4812      	ldr	r0, [pc, #72]	; (800513c <rand+0x64>)
 80050f2:	214e      	movs	r1, #78	; 0x4e
 80050f4:	f000 f848 	bl	8005188 <__assert_func>
 80050f8:	4a11      	ldr	r2, [pc, #68]	; (8005140 <rand+0x68>)
 80050fa:	4b12      	ldr	r3, [pc, #72]	; (8005144 <rand+0x6c>)
 80050fc:	e9c0 2300 	strd	r2, r3, [r0]
 8005100:	4b11      	ldr	r3, [pc, #68]	; (8005148 <rand+0x70>)
 8005102:	6083      	str	r3, [r0, #8]
 8005104:	230b      	movs	r3, #11
 8005106:	8183      	strh	r3, [r0, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	2300      	movs	r3, #0
 800510c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005110:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005112:	4a0e      	ldr	r2, [pc, #56]	; (800514c <rand+0x74>)
 8005114:	6920      	ldr	r0, [r4, #16]
 8005116:	6963      	ldr	r3, [r4, #20]
 8005118:	490d      	ldr	r1, [pc, #52]	; (8005150 <rand+0x78>)
 800511a:	4342      	muls	r2, r0
 800511c:	fb01 2203 	mla	r2, r1, r3, r2
 8005120:	fba0 0101 	umull	r0, r1, r0, r1
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	eb42 0001 	adc.w	r0, r2, r1
 800512a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800512e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005132:	bd10      	pop	{r4, pc}
 8005134:	2000000c 	.word	0x2000000c
 8005138:	080061e4 	.word	0x080061e4
 800513c:	080061fb 	.word	0x080061fb
 8005140:	abcd330e 	.word	0xabcd330e
 8005144:	e66d1234 	.word	0xe66d1234
 8005148:	0005deec 	.word	0x0005deec
 800514c:	5851f42d 	.word	0x5851f42d
 8005150:	4c957f2d 	.word	0x4c957f2d

08005154 <time>:
 8005154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005156:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <time+0x30>)
 8005158:	2200      	movs	r2, #0
 800515a:	4669      	mov	r1, sp
 800515c:	4604      	mov	r4, r0
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	f000 f842 	bl	80051e8 <_gettimeofday_r>
 8005164:	2800      	cmp	r0, #0
 8005166:	bfbe      	ittt	lt
 8005168:	f04f 32ff 	movlt.w	r2, #4294967295
 800516c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005170:	e9cd 2300 	strdlt	r2, r3, [sp]
 8005174:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005178:	b10c      	cbz	r4, 800517e <time+0x2a>
 800517a:	e9c4 0100 	strd	r0, r1, [r4]
 800517e:	b004      	add	sp, #16
 8005180:	bd10      	pop	{r4, pc}
 8005182:	bf00      	nop
 8005184:	2000000c 	.word	0x2000000c

08005188 <__assert_func>:
 8005188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800518a:	4614      	mov	r4, r2
 800518c:	461a      	mov	r2, r3
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <__assert_func+0x2c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4605      	mov	r5, r0
 8005194:	68d8      	ldr	r0, [r3, #12]
 8005196:	b14c      	cbz	r4, 80051ac <__assert_func+0x24>
 8005198:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <__assert_func+0x30>)
 800519a:	9100      	str	r1, [sp, #0]
 800519c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80051a0:	4906      	ldr	r1, [pc, #24]	; (80051bc <__assert_func+0x34>)
 80051a2:	462b      	mov	r3, r5
 80051a4:	f000 f80e 	bl	80051c4 <fiprintf>
 80051a8:	f000 fcd6 	bl	8005b58 <abort>
 80051ac:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <__assert_func+0x38>)
 80051ae:	461c      	mov	r4, r3
 80051b0:	e7f3      	b.n	800519a <__assert_func+0x12>
 80051b2:	bf00      	nop
 80051b4:	2000000c 	.word	0x2000000c
 80051b8:	08006256 	.word	0x08006256
 80051bc:	08006263 	.word	0x08006263
 80051c0:	08006291 	.word	0x08006291

080051c4 <fiprintf>:
 80051c4:	b40e      	push	{r1, r2, r3}
 80051c6:	b503      	push	{r0, r1, lr}
 80051c8:	4601      	mov	r1, r0
 80051ca:	ab03      	add	r3, sp, #12
 80051cc:	4805      	ldr	r0, [pc, #20]	; (80051e4 <fiprintf+0x20>)
 80051ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80051d2:	6800      	ldr	r0, [r0, #0]
 80051d4:	9301      	str	r3, [sp, #4]
 80051d6:	f000 f92b 	bl	8005430 <_vfiprintf_r>
 80051da:	b002      	add	sp, #8
 80051dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051e0:	b003      	add	sp, #12
 80051e2:	4770      	bx	lr
 80051e4:	2000000c 	.word	0x2000000c

080051e8 <_gettimeofday_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d07      	ldr	r5, [pc, #28]	; (8005208 <_gettimeofday_r+0x20>)
 80051ec:	2300      	movs	r3, #0
 80051ee:	4604      	mov	r4, r0
 80051f0:	4608      	mov	r0, r1
 80051f2:	4611      	mov	r1, r2
 80051f4:	602b      	str	r3, [r5, #0]
 80051f6:	f000 ffd3 	bl	80061a0 <_gettimeofday>
 80051fa:	1c43      	adds	r3, r0, #1
 80051fc:	d102      	bne.n	8005204 <_gettimeofday_r+0x1c>
 80051fe:	682b      	ldr	r3, [r5, #0]
 8005200:	b103      	cbz	r3, 8005204 <_gettimeofday_r+0x1c>
 8005202:	6023      	str	r3, [r4, #0]
 8005204:	bd38      	pop	{r3, r4, r5, pc}
 8005206:	bf00      	nop
 8005208:	20008ab8 	.word	0x20008ab8

0800520c <malloc>:
 800520c:	4b02      	ldr	r3, [pc, #8]	; (8005218 <malloc+0xc>)
 800520e:	4601      	mov	r1, r0
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	f000 b86f 	b.w	80052f4 <_malloc_r>
 8005216:	bf00      	nop
 8005218:	2000000c 	.word	0x2000000c

0800521c <_free_r>:
 800521c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800521e:	2900      	cmp	r1, #0
 8005220:	d044      	beq.n	80052ac <_free_r+0x90>
 8005222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005226:	9001      	str	r0, [sp, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f1a1 0404 	sub.w	r4, r1, #4
 800522e:	bfb8      	it	lt
 8005230:	18e4      	addlt	r4, r4, r3
 8005232:	f000 feb9 	bl	8005fa8 <__malloc_lock>
 8005236:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <_free_r+0x94>)
 8005238:	9801      	ldr	r0, [sp, #4]
 800523a:	6813      	ldr	r3, [r2, #0]
 800523c:	b933      	cbnz	r3, 800524c <_free_r+0x30>
 800523e:	6063      	str	r3, [r4, #4]
 8005240:	6014      	str	r4, [r2, #0]
 8005242:	b003      	add	sp, #12
 8005244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005248:	f000 beb4 	b.w	8005fb4 <__malloc_unlock>
 800524c:	42a3      	cmp	r3, r4
 800524e:	d908      	bls.n	8005262 <_free_r+0x46>
 8005250:	6825      	ldr	r5, [r4, #0]
 8005252:	1961      	adds	r1, r4, r5
 8005254:	428b      	cmp	r3, r1
 8005256:	bf01      	itttt	eq
 8005258:	6819      	ldreq	r1, [r3, #0]
 800525a:	685b      	ldreq	r3, [r3, #4]
 800525c:	1949      	addeq	r1, r1, r5
 800525e:	6021      	streq	r1, [r4, #0]
 8005260:	e7ed      	b.n	800523e <_free_r+0x22>
 8005262:	461a      	mov	r2, r3
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	b10b      	cbz	r3, 800526c <_free_r+0x50>
 8005268:	42a3      	cmp	r3, r4
 800526a:	d9fa      	bls.n	8005262 <_free_r+0x46>
 800526c:	6811      	ldr	r1, [r2, #0]
 800526e:	1855      	adds	r5, r2, r1
 8005270:	42a5      	cmp	r5, r4
 8005272:	d10b      	bne.n	800528c <_free_r+0x70>
 8005274:	6824      	ldr	r4, [r4, #0]
 8005276:	4421      	add	r1, r4
 8005278:	1854      	adds	r4, r2, r1
 800527a:	42a3      	cmp	r3, r4
 800527c:	6011      	str	r1, [r2, #0]
 800527e:	d1e0      	bne.n	8005242 <_free_r+0x26>
 8005280:	681c      	ldr	r4, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	6053      	str	r3, [r2, #4]
 8005286:	4421      	add	r1, r4
 8005288:	6011      	str	r1, [r2, #0]
 800528a:	e7da      	b.n	8005242 <_free_r+0x26>
 800528c:	d902      	bls.n	8005294 <_free_r+0x78>
 800528e:	230c      	movs	r3, #12
 8005290:	6003      	str	r3, [r0, #0]
 8005292:	e7d6      	b.n	8005242 <_free_r+0x26>
 8005294:	6825      	ldr	r5, [r4, #0]
 8005296:	1961      	adds	r1, r4, r5
 8005298:	428b      	cmp	r3, r1
 800529a:	bf04      	itt	eq
 800529c:	6819      	ldreq	r1, [r3, #0]
 800529e:	685b      	ldreq	r3, [r3, #4]
 80052a0:	6063      	str	r3, [r4, #4]
 80052a2:	bf04      	itt	eq
 80052a4:	1949      	addeq	r1, r1, r5
 80052a6:	6021      	streq	r1, [r4, #0]
 80052a8:	6054      	str	r4, [r2, #4]
 80052aa:	e7ca      	b.n	8005242 <_free_r+0x26>
 80052ac:	b003      	add	sp, #12
 80052ae:	bd30      	pop	{r4, r5, pc}
 80052b0:	20008ab0 	.word	0x20008ab0

080052b4 <sbrk_aligned>:
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	4e0e      	ldr	r6, [pc, #56]	; (80052f0 <sbrk_aligned+0x3c>)
 80052b8:	460c      	mov	r4, r1
 80052ba:	6831      	ldr	r1, [r6, #0]
 80052bc:	4605      	mov	r5, r0
 80052be:	b911      	cbnz	r1, 80052c6 <sbrk_aligned+0x12>
 80052c0:	f000 fb7a 	bl	80059b8 <_sbrk_r>
 80052c4:	6030      	str	r0, [r6, #0]
 80052c6:	4621      	mov	r1, r4
 80052c8:	4628      	mov	r0, r5
 80052ca:	f000 fb75 	bl	80059b8 <_sbrk_r>
 80052ce:	1c43      	adds	r3, r0, #1
 80052d0:	d00a      	beq.n	80052e8 <sbrk_aligned+0x34>
 80052d2:	1cc4      	adds	r4, r0, #3
 80052d4:	f024 0403 	bic.w	r4, r4, #3
 80052d8:	42a0      	cmp	r0, r4
 80052da:	d007      	beq.n	80052ec <sbrk_aligned+0x38>
 80052dc:	1a21      	subs	r1, r4, r0
 80052de:	4628      	mov	r0, r5
 80052e0:	f000 fb6a 	bl	80059b8 <_sbrk_r>
 80052e4:	3001      	adds	r0, #1
 80052e6:	d101      	bne.n	80052ec <sbrk_aligned+0x38>
 80052e8:	f04f 34ff 	mov.w	r4, #4294967295
 80052ec:	4620      	mov	r0, r4
 80052ee:	bd70      	pop	{r4, r5, r6, pc}
 80052f0:	20008ab4 	.word	0x20008ab4

080052f4 <_malloc_r>:
 80052f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f8:	1ccd      	adds	r5, r1, #3
 80052fa:	f025 0503 	bic.w	r5, r5, #3
 80052fe:	3508      	adds	r5, #8
 8005300:	2d0c      	cmp	r5, #12
 8005302:	bf38      	it	cc
 8005304:	250c      	movcc	r5, #12
 8005306:	2d00      	cmp	r5, #0
 8005308:	4607      	mov	r7, r0
 800530a:	db01      	blt.n	8005310 <_malloc_r+0x1c>
 800530c:	42a9      	cmp	r1, r5
 800530e:	d905      	bls.n	800531c <_malloc_r+0x28>
 8005310:	230c      	movs	r3, #12
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	2600      	movs	r6, #0
 8005316:	4630      	mov	r0, r6
 8005318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800531c:	4e2e      	ldr	r6, [pc, #184]	; (80053d8 <_malloc_r+0xe4>)
 800531e:	f000 fe43 	bl	8005fa8 <__malloc_lock>
 8005322:	6833      	ldr	r3, [r6, #0]
 8005324:	461c      	mov	r4, r3
 8005326:	bb34      	cbnz	r4, 8005376 <_malloc_r+0x82>
 8005328:	4629      	mov	r1, r5
 800532a:	4638      	mov	r0, r7
 800532c:	f7ff ffc2 	bl	80052b4 <sbrk_aligned>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	4604      	mov	r4, r0
 8005334:	d14d      	bne.n	80053d2 <_malloc_r+0xde>
 8005336:	6834      	ldr	r4, [r6, #0]
 8005338:	4626      	mov	r6, r4
 800533a:	2e00      	cmp	r6, #0
 800533c:	d140      	bne.n	80053c0 <_malloc_r+0xcc>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	4631      	mov	r1, r6
 8005342:	4638      	mov	r0, r7
 8005344:	eb04 0803 	add.w	r8, r4, r3
 8005348:	f000 fb36 	bl	80059b8 <_sbrk_r>
 800534c:	4580      	cmp	r8, r0
 800534e:	d13a      	bne.n	80053c6 <_malloc_r+0xd2>
 8005350:	6821      	ldr	r1, [r4, #0]
 8005352:	3503      	adds	r5, #3
 8005354:	1a6d      	subs	r5, r5, r1
 8005356:	f025 0503 	bic.w	r5, r5, #3
 800535a:	3508      	adds	r5, #8
 800535c:	2d0c      	cmp	r5, #12
 800535e:	bf38      	it	cc
 8005360:	250c      	movcc	r5, #12
 8005362:	4629      	mov	r1, r5
 8005364:	4638      	mov	r0, r7
 8005366:	f7ff ffa5 	bl	80052b4 <sbrk_aligned>
 800536a:	3001      	adds	r0, #1
 800536c:	d02b      	beq.n	80053c6 <_malloc_r+0xd2>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	442b      	add	r3, r5
 8005372:	6023      	str	r3, [r4, #0]
 8005374:	e00e      	b.n	8005394 <_malloc_r+0xa0>
 8005376:	6822      	ldr	r2, [r4, #0]
 8005378:	1b52      	subs	r2, r2, r5
 800537a:	d41e      	bmi.n	80053ba <_malloc_r+0xc6>
 800537c:	2a0b      	cmp	r2, #11
 800537e:	d916      	bls.n	80053ae <_malloc_r+0xba>
 8005380:	1961      	adds	r1, r4, r5
 8005382:	42a3      	cmp	r3, r4
 8005384:	6025      	str	r5, [r4, #0]
 8005386:	bf18      	it	ne
 8005388:	6059      	strne	r1, [r3, #4]
 800538a:	6863      	ldr	r3, [r4, #4]
 800538c:	bf08      	it	eq
 800538e:	6031      	streq	r1, [r6, #0]
 8005390:	5162      	str	r2, [r4, r5]
 8005392:	604b      	str	r3, [r1, #4]
 8005394:	4638      	mov	r0, r7
 8005396:	f104 060b 	add.w	r6, r4, #11
 800539a:	f000 fe0b 	bl	8005fb4 <__malloc_unlock>
 800539e:	f026 0607 	bic.w	r6, r6, #7
 80053a2:	1d23      	adds	r3, r4, #4
 80053a4:	1af2      	subs	r2, r6, r3
 80053a6:	d0b6      	beq.n	8005316 <_malloc_r+0x22>
 80053a8:	1b9b      	subs	r3, r3, r6
 80053aa:	50a3      	str	r3, [r4, r2]
 80053ac:	e7b3      	b.n	8005316 <_malloc_r+0x22>
 80053ae:	6862      	ldr	r2, [r4, #4]
 80053b0:	42a3      	cmp	r3, r4
 80053b2:	bf0c      	ite	eq
 80053b4:	6032      	streq	r2, [r6, #0]
 80053b6:	605a      	strne	r2, [r3, #4]
 80053b8:	e7ec      	b.n	8005394 <_malloc_r+0xa0>
 80053ba:	4623      	mov	r3, r4
 80053bc:	6864      	ldr	r4, [r4, #4]
 80053be:	e7b2      	b.n	8005326 <_malloc_r+0x32>
 80053c0:	4634      	mov	r4, r6
 80053c2:	6876      	ldr	r6, [r6, #4]
 80053c4:	e7b9      	b.n	800533a <_malloc_r+0x46>
 80053c6:	230c      	movs	r3, #12
 80053c8:	603b      	str	r3, [r7, #0]
 80053ca:	4638      	mov	r0, r7
 80053cc:	f000 fdf2 	bl	8005fb4 <__malloc_unlock>
 80053d0:	e7a1      	b.n	8005316 <_malloc_r+0x22>
 80053d2:	6025      	str	r5, [r4, #0]
 80053d4:	e7de      	b.n	8005394 <_malloc_r+0xa0>
 80053d6:	bf00      	nop
 80053d8:	20008ab0 	.word	0x20008ab0

080053dc <__sfputc_r>:
 80053dc:	6893      	ldr	r3, [r2, #8]
 80053de:	3b01      	subs	r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	b410      	push	{r4}
 80053e4:	6093      	str	r3, [r2, #8]
 80053e6:	da08      	bge.n	80053fa <__sfputc_r+0x1e>
 80053e8:	6994      	ldr	r4, [r2, #24]
 80053ea:	42a3      	cmp	r3, r4
 80053ec:	db01      	blt.n	80053f2 <__sfputc_r+0x16>
 80053ee:	290a      	cmp	r1, #10
 80053f0:	d103      	bne.n	80053fa <__sfputc_r+0x1e>
 80053f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053f6:	f000 baef 	b.w	80059d8 <__swbuf_r>
 80053fa:	6813      	ldr	r3, [r2, #0]
 80053fc:	1c58      	adds	r0, r3, #1
 80053fe:	6010      	str	r0, [r2, #0]
 8005400:	7019      	strb	r1, [r3, #0]
 8005402:	4608      	mov	r0, r1
 8005404:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005408:	4770      	bx	lr

0800540a <__sfputs_r>:
 800540a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540c:	4606      	mov	r6, r0
 800540e:	460f      	mov	r7, r1
 8005410:	4614      	mov	r4, r2
 8005412:	18d5      	adds	r5, r2, r3
 8005414:	42ac      	cmp	r4, r5
 8005416:	d101      	bne.n	800541c <__sfputs_r+0x12>
 8005418:	2000      	movs	r0, #0
 800541a:	e007      	b.n	800542c <__sfputs_r+0x22>
 800541c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005420:	463a      	mov	r2, r7
 8005422:	4630      	mov	r0, r6
 8005424:	f7ff ffda 	bl	80053dc <__sfputc_r>
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	d1f3      	bne.n	8005414 <__sfputs_r+0xa>
 800542c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005430 <_vfiprintf_r>:
 8005430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005434:	460d      	mov	r5, r1
 8005436:	b09d      	sub	sp, #116	; 0x74
 8005438:	4614      	mov	r4, r2
 800543a:	4698      	mov	r8, r3
 800543c:	4606      	mov	r6, r0
 800543e:	b118      	cbz	r0, 8005448 <_vfiprintf_r+0x18>
 8005440:	6983      	ldr	r3, [r0, #24]
 8005442:	b90b      	cbnz	r3, 8005448 <_vfiprintf_r+0x18>
 8005444:	f000 fcaa 	bl	8005d9c <__sinit>
 8005448:	4b89      	ldr	r3, [pc, #548]	; (8005670 <_vfiprintf_r+0x240>)
 800544a:	429d      	cmp	r5, r3
 800544c:	d11b      	bne.n	8005486 <_vfiprintf_r+0x56>
 800544e:	6875      	ldr	r5, [r6, #4]
 8005450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005452:	07d9      	lsls	r1, r3, #31
 8005454:	d405      	bmi.n	8005462 <_vfiprintf_r+0x32>
 8005456:	89ab      	ldrh	r3, [r5, #12]
 8005458:	059a      	lsls	r2, r3, #22
 800545a:	d402      	bmi.n	8005462 <_vfiprintf_r+0x32>
 800545c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800545e:	f000 fd3b 	bl	8005ed8 <__retarget_lock_acquire_recursive>
 8005462:	89ab      	ldrh	r3, [r5, #12]
 8005464:	071b      	lsls	r3, r3, #28
 8005466:	d501      	bpl.n	800546c <_vfiprintf_r+0x3c>
 8005468:	692b      	ldr	r3, [r5, #16]
 800546a:	b9eb      	cbnz	r3, 80054a8 <_vfiprintf_r+0x78>
 800546c:	4629      	mov	r1, r5
 800546e:	4630      	mov	r0, r6
 8005470:	f000 fb04 	bl	8005a7c <__swsetup_r>
 8005474:	b1c0      	cbz	r0, 80054a8 <_vfiprintf_r+0x78>
 8005476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005478:	07dc      	lsls	r4, r3, #31
 800547a:	d50e      	bpl.n	800549a <_vfiprintf_r+0x6a>
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	b01d      	add	sp, #116	; 0x74
 8005482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005486:	4b7b      	ldr	r3, [pc, #492]	; (8005674 <_vfiprintf_r+0x244>)
 8005488:	429d      	cmp	r5, r3
 800548a:	d101      	bne.n	8005490 <_vfiprintf_r+0x60>
 800548c:	68b5      	ldr	r5, [r6, #8]
 800548e:	e7df      	b.n	8005450 <_vfiprintf_r+0x20>
 8005490:	4b79      	ldr	r3, [pc, #484]	; (8005678 <_vfiprintf_r+0x248>)
 8005492:	429d      	cmp	r5, r3
 8005494:	bf08      	it	eq
 8005496:	68f5      	ldreq	r5, [r6, #12]
 8005498:	e7da      	b.n	8005450 <_vfiprintf_r+0x20>
 800549a:	89ab      	ldrh	r3, [r5, #12]
 800549c:	0598      	lsls	r0, r3, #22
 800549e:	d4ed      	bmi.n	800547c <_vfiprintf_r+0x4c>
 80054a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054a2:	f000 fd1a 	bl	8005eda <__retarget_lock_release_recursive>
 80054a6:	e7e9      	b.n	800547c <_vfiprintf_r+0x4c>
 80054a8:	2300      	movs	r3, #0
 80054aa:	9309      	str	r3, [sp, #36]	; 0x24
 80054ac:	2320      	movs	r3, #32
 80054ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80054b6:	2330      	movs	r3, #48	; 0x30
 80054b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800567c <_vfiprintf_r+0x24c>
 80054bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054c0:	f04f 0901 	mov.w	r9, #1
 80054c4:	4623      	mov	r3, r4
 80054c6:	469a      	mov	sl, r3
 80054c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054cc:	b10a      	cbz	r2, 80054d2 <_vfiprintf_r+0xa2>
 80054ce:	2a25      	cmp	r2, #37	; 0x25
 80054d0:	d1f9      	bne.n	80054c6 <_vfiprintf_r+0x96>
 80054d2:	ebba 0b04 	subs.w	fp, sl, r4
 80054d6:	d00b      	beq.n	80054f0 <_vfiprintf_r+0xc0>
 80054d8:	465b      	mov	r3, fp
 80054da:	4622      	mov	r2, r4
 80054dc:	4629      	mov	r1, r5
 80054de:	4630      	mov	r0, r6
 80054e0:	f7ff ff93 	bl	800540a <__sfputs_r>
 80054e4:	3001      	adds	r0, #1
 80054e6:	f000 80aa 	beq.w	800563e <_vfiprintf_r+0x20e>
 80054ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ec:	445a      	add	r2, fp
 80054ee:	9209      	str	r2, [sp, #36]	; 0x24
 80054f0:	f89a 3000 	ldrb.w	r3, [sl]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 80a2 	beq.w	800563e <_vfiprintf_r+0x20e>
 80054fa:	2300      	movs	r3, #0
 80054fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005504:	f10a 0a01 	add.w	sl, sl, #1
 8005508:	9304      	str	r3, [sp, #16]
 800550a:	9307      	str	r3, [sp, #28]
 800550c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005510:	931a      	str	r3, [sp, #104]	; 0x68
 8005512:	4654      	mov	r4, sl
 8005514:	2205      	movs	r2, #5
 8005516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800551a:	4858      	ldr	r0, [pc, #352]	; (800567c <_vfiprintf_r+0x24c>)
 800551c:	f7fa fe90 	bl	8000240 <memchr>
 8005520:	9a04      	ldr	r2, [sp, #16]
 8005522:	b9d8      	cbnz	r0, 800555c <_vfiprintf_r+0x12c>
 8005524:	06d1      	lsls	r1, r2, #27
 8005526:	bf44      	itt	mi
 8005528:	2320      	movmi	r3, #32
 800552a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800552e:	0713      	lsls	r3, r2, #28
 8005530:	bf44      	itt	mi
 8005532:	232b      	movmi	r3, #43	; 0x2b
 8005534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005538:	f89a 3000 	ldrb.w	r3, [sl]
 800553c:	2b2a      	cmp	r3, #42	; 0x2a
 800553e:	d015      	beq.n	800556c <_vfiprintf_r+0x13c>
 8005540:	9a07      	ldr	r2, [sp, #28]
 8005542:	4654      	mov	r4, sl
 8005544:	2000      	movs	r0, #0
 8005546:	f04f 0c0a 	mov.w	ip, #10
 800554a:	4621      	mov	r1, r4
 800554c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005550:	3b30      	subs	r3, #48	; 0x30
 8005552:	2b09      	cmp	r3, #9
 8005554:	d94e      	bls.n	80055f4 <_vfiprintf_r+0x1c4>
 8005556:	b1b0      	cbz	r0, 8005586 <_vfiprintf_r+0x156>
 8005558:	9207      	str	r2, [sp, #28]
 800555a:	e014      	b.n	8005586 <_vfiprintf_r+0x156>
 800555c:	eba0 0308 	sub.w	r3, r0, r8
 8005560:	fa09 f303 	lsl.w	r3, r9, r3
 8005564:	4313      	orrs	r3, r2
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	46a2      	mov	sl, r4
 800556a:	e7d2      	b.n	8005512 <_vfiprintf_r+0xe2>
 800556c:	9b03      	ldr	r3, [sp, #12]
 800556e:	1d19      	adds	r1, r3, #4
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	9103      	str	r1, [sp, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	bfbb      	ittet	lt
 8005578:	425b      	neglt	r3, r3
 800557a:	f042 0202 	orrlt.w	r2, r2, #2
 800557e:	9307      	strge	r3, [sp, #28]
 8005580:	9307      	strlt	r3, [sp, #28]
 8005582:	bfb8      	it	lt
 8005584:	9204      	strlt	r2, [sp, #16]
 8005586:	7823      	ldrb	r3, [r4, #0]
 8005588:	2b2e      	cmp	r3, #46	; 0x2e
 800558a:	d10c      	bne.n	80055a6 <_vfiprintf_r+0x176>
 800558c:	7863      	ldrb	r3, [r4, #1]
 800558e:	2b2a      	cmp	r3, #42	; 0x2a
 8005590:	d135      	bne.n	80055fe <_vfiprintf_r+0x1ce>
 8005592:	9b03      	ldr	r3, [sp, #12]
 8005594:	1d1a      	adds	r2, r3, #4
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	9203      	str	r2, [sp, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	bfb8      	it	lt
 800559e:	f04f 33ff 	movlt.w	r3, #4294967295
 80055a2:	3402      	adds	r4, #2
 80055a4:	9305      	str	r3, [sp, #20]
 80055a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800568c <_vfiprintf_r+0x25c>
 80055aa:	7821      	ldrb	r1, [r4, #0]
 80055ac:	2203      	movs	r2, #3
 80055ae:	4650      	mov	r0, sl
 80055b0:	f7fa fe46 	bl	8000240 <memchr>
 80055b4:	b140      	cbz	r0, 80055c8 <_vfiprintf_r+0x198>
 80055b6:	2340      	movs	r3, #64	; 0x40
 80055b8:	eba0 000a 	sub.w	r0, r0, sl
 80055bc:	fa03 f000 	lsl.w	r0, r3, r0
 80055c0:	9b04      	ldr	r3, [sp, #16]
 80055c2:	4303      	orrs	r3, r0
 80055c4:	3401      	adds	r4, #1
 80055c6:	9304      	str	r3, [sp, #16]
 80055c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055cc:	482c      	ldr	r0, [pc, #176]	; (8005680 <_vfiprintf_r+0x250>)
 80055ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055d2:	2206      	movs	r2, #6
 80055d4:	f7fa fe34 	bl	8000240 <memchr>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d03f      	beq.n	800565c <_vfiprintf_r+0x22c>
 80055dc:	4b29      	ldr	r3, [pc, #164]	; (8005684 <_vfiprintf_r+0x254>)
 80055de:	bb1b      	cbnz	r3, 8005628 <_vfiprintf_r+0x1f8>
 80055e0:	9b03      	ldr	r3, [sp, #12]
 80055e2:	3307      	adds	r3, #7
 80055e4:	f023 0307 	bic.w	r3, r3, #7
 80055e8:	3308      	adds	r3, #8
 80055ea:	9303      	str	r3, [sp, #12]
 80055ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ee:	443b      	add	r3, r7
 80055f0:	9309      	str	r3, [sp, #36]	; 0x24
 80055f2:	e767      	b.n	80054c4 <_vfiprintf_r+0x94>
 80055f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055f8:	460c      	mov	r4, r1
 80055fa:	2001      	movs	r0, #1
 80055fc:	e7a5      	b.n	800554a <_vfiprintf_r+0x11a>
 80055fe:	2300      	movs	r3, #0
 8005600:	3401      	adds	r4, #1
 8005602:	9305      	str	r3, [sp, #20]
 8005604:	4619      	mov	r1, r3
 8005606:	f04f 0c0a 	mov.w	ip, #10
 800560a:	4620      	mov	r0, r4
 800560c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005610:	3a30      	subs	r2, #48	; 0x30
 8005612:	2a09      	cmp	r2, #9
 8005614:	d903      	bls.n	800561e <_vfiprintf_r+0x1ee>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0c5      	beq.n	80055a6 <_vfiprintf_r+0x176>
 800561a:	9105      	str	r1, [sp, #20]
 800561c:	e7c3      	b.n	80055a6 <_vfiprintf_r+0x176>
 800561e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005622:	4604      	mov	r4, r0
 8005624:	2301      	movs	r3, #1
 8005626:	e7f0      	b.n	800560a <_vfiprintf_r+0x1da>
 8005628:	ab03      	add	r3, sp, #12
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	462a      	mov	r2, r5
 800562e:	4b16      	ldr	r3, [pc, #88]	; (8005688 <_vfiprintf_r+0x258>)
 8005630:	a904      	add	r1, sp, #16
 8005632:	4630      	mov	r0, r6
 8005634:	f3af 8000 	nop.w
 8005638:	4607      	mov	r7, r0
 800563a:	1c78      	adds	r0, r7, #1
 800563c:	d1d6      	bne.n	80055ec <_vfiprintf_r+0x1bc>
 800563e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005640:	07d9      	lsls	r1, r3, #31
 8005642:	d405      	bmi.n	8005650 <_vfiprintf_r+0x220>
 8005644:	89ab      	ldrh	r3, [r5, #12]
 8005646:	059a      	lsls	r2, r3, #22
 8005648:	d402      	bmi.n	8005650 <_vfiprintf_r+0x220>
 800564a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800564c:	f000 fc45 	bl	8005eda <__retarget_lock_release_recursive>
 8005650:	89ab      	ldrh	r3, [r5, #12]
 8005652:	065b      	lsls	r3, r3, #25
 8005654:	f53f af12 	bmi.w	800547c <_vfiprintf_r+0x4c>
 8005658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800565a:	e711      	b.n	8005480 <_vfiprintf_r+0x50>
 800565c:	ab03      	add	r3, sp, #12
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	462a      	mov	r2, r5
 8005662:	4b09      	ldr	r3, [pc, #36]	; (8005688 <_vfiprintf_r+0x258>)
 8005664:	a904      	add	r1, sp, #16
 8005666:	4630      	mov	r0, r6
 8005668:	f000 f880 	bl	800576c <_printf_i>
 800566c:	e7e4      	b.n	8005638 <_vfiprintf_r+0x208>
 800566e:	bf00      	nop
 8005670:	080062e8 	.word	0x080062e8
 8005674:	08006308 	.word	0x08006308
 8005678:	080062c8 	.word	0x080062c8
 800567c:	08006292 	.word	0x08006292
 8005680:	0800629c 	.word	0x0800629c
 8005684:	00000000 	.word	0x00000000
 8005688:	0800540b 	.word	0x0800540b
 800568c:	08006298 	.word	0x08006298

08005690 <_printf_common>:
 8005690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005694:	4616      	mov	r6, r2
 8005696:	4699      	mov	r9, r3
 8005698:	688a      	ldr	r2, [r1, #8]
 800569a:	690b      	ldr	r3, [r1, #16]
 800569c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056a0:	4293      	cmp	r3, r2
 80056a2:	bfb8      	it	lt
 80056a4:	4613      	movlt	r3, r2
 80056a6:	6033      	str	r3, [r6, #0]
 80056a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056ac:	4607      	mov	r7, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	b10a      	cbz	r2, 80056b6 <_printf_common+0x26>
 80056b2:	3301      	adds	r3, #1
 80056b4:	6033      	str	r3, [r6, #0]
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	0699      	lsls	r1, r3, #26
 80056ba:	bf42      	ittt	mi
 80056bc:	6833      	ldrmi	r3, [r6, #0]
 80056be:	3302      	addmi	r3, #2
 80056c0:	6033      	strmi	r3, [r6, #0]
 80056c2:	6825      	ldr	r5, [r4, #0]
 80056c4:	f015 0506 	ands.w	r5, r5, #6
 80056c8:	d106      	bne.n	80056d8 <_printf_common+0x48>
 80056ca:	f104 0a19 	add.w	sl, r4, #25
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	6832      	ldr	r2, [r6, #0]
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	42ab      	cmp	r3, r5
 80056d6:	dc26      	bgt.n	8005726 <_printf_common+0x96>
 80056d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056dc:	1e13      	subs	r3, r2, #0
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	bf18      	it	ne
 80056e2:	2301      	movne	r3, #1
 80056e4:	0692      	lsls	r2, r2, #26
 80056e6:	d42b      	bmi.n	8005740 <_printf_common+0xb0>
 80056e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056ec:	4649      	mov	r1, r9
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c0      	blx	r8
 80056f2:	3001      	adds	r0, #1
 80056f4:	d01e      	beq.n	8005734 <_printf_common+0xa4>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	68e5      	ldr	r5, [r4, #12]
 80056fa:	6832      	ldr	r2, [r6, #0]
 80056fc:	f003 0306 	and.w	r3, r3, #6
 8005700:	2b04      	cmp	r3, #4
 8005702:	bf08      	it	eq
 8005704:	1aad      	subeq	r5, r5, r2
 8005706:	68a3      	ldr	r3, [r4, #8]
 8005708:	6922      	ldr	r2, [r4, #16]
 800570a:	bf0c      	ite	eq
 800570c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005710:	2500      	movne	r5, #0
 8005712:	4293      	cmp	r3, r2
 8005714:	bfc4      	itt	gt
 8005716:	1a9b      	subgt	r3, r3, r2
 8005718:	18ed      	addgt	r5, r5, r3
 800571a:	2600      	movs	r6, #0
 800571c:	341a      	adds	r4, #26
 800571e:	42b5      	cmp	r5, r6
 8005720:	d11a      	bne.n	8005758 <_printf_common+0xc8>
 8005722:	2000      	movs	r0, #0
 8005724:	e008      	b.n	8005738 <_printf_common+0xa8>
 8005726:	2301      	movs	r3, #1
 8005728:	4652      	mov	r2, sl
 800572a:	4649      	mov	r1, r9
 800572c:	4638      	mov	r0, r7
 800572e:	47c0      	blx	r8
 8005730:	3001      	adds	r0, #1
 8005732:	d103      	bne.n	800573c <_printf_common+0xac>
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800573c:	3501      	adds	r5, #1
 800573e:	e7c6      	b.n	80056ce <_printf_common+0x3e>
 8005740:	18e1      	adds	r1, r4, r3
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	2030      	movs	r0, #48	; 0x30
 8005746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800574a:	4422      	add	r2, r4
 800574c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005754:	3302      	adds	r3, #2
 8005756:	e7c7      	b.n	80056e8 <_printf_common+0x58>
 8005758:	2301      	movs	r3, #1
 800575a:	4622      	mov	r2, r4
 800575c:	4649      	mov	r1, r9
 800575e:	4638      	mov	r0, r7
 8005760:	47c0      	blx	r8
 8005762:	3001      	adds	r0, #1
 8005764:	d0e6      	beq.n	8005734 <_printf_common+0xa4>
 8005766:	3601      	adds	r6, #1
 8005768:	e7d9      	b.n	800571e <_printf_common+0x8e>
	...

0800576c <_printf_i>:
 800576c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005770:	7e0f      	ldrb	r7, [r1, #24]
 8005772:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005774:	2f78      	cmp	r7, #120	; 0x78
 8005776:	4691      	mov	r9, r2
 8005778:	4680      	mov	r8, r0
 800577a:	460c      	mov	r4, r1
 800577c:	469a      	mov	sl, r3
 800577e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005782:	d807      	bhi.n	8005794 <_printf_i+0x28>
 8005784:	2f62      	cmp	r7, #98	; 0x62
 8005786:	d80a      	bhi.n	800579e <_printf_i+0x32>
 8005788:	2f00      	cmp	r7, #0
 800578a:	f000 80d8 	beq.w	800593e <_printf_i+0x1d2>
 800578e:	2f58      	cmp	r7, #88	; 0x58
 8005790:	f000 80a3 	beq.w	80058da <_printf_i+0x16e>
 8005794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800579c:	e03a      	b.n	8005814 <_printf_i+0xa8>
 800579e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057a2:	2b15      	cmp	r3, #21
 80057a4:	d8f6      	bhi.n	8005794 <_printf_i+0x28>
 80057a6:	a101      	add	r1, pc, #4	; (adr r1, 80057ac <_printf_i+0x40>)
 80057a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057ac:	08005805 	.word	0x08005805
 80057b0:	08005819 	.word	0x08005819
 80057b4:	08005795 	.word	0x08005795
 80057b8:	08005795 	.word	0x08005795
 80057bc:	08005795 	.word	0x08005795
 80057c0:	08005795 	.word	0x08005795
 80057c4:	08005819 	.word	0x08005819
 80057c8:	08005795 	.word	0x08005795
 80057cc:	08005795 	.word	0x08005795
 80057d0:	08005795 	.word	0x08005795
 80057d4:	08005795 	.word	0x08005795
 80057d8:	08005925 	.word	0x08005925
 80057dc:	08005849 	.word	0x08005849
 80057e0:	08005907 	.word	0x08005907
 80057e4:	08005795 	.word	0x08005795
 80057e8:	08005795 	.word	0x08005795
 80057ec:	08005947 	.word	0x08005947
 80057f0:	08005795 	.word	0x08005795
 80057f4:	08005849 	.word	0x08005849
 80057f8:	08005795 	.word	0x08005795
 80057fc:	08005795 	.word	0x08005795
 8005800:	0800590f 	.word	0x0800590f
 8005804:	682b      	ldr	r3, [r5, #0]
 8005806:	1d1a      	adds	r2, r3, #4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	602a      	str	r2, [r5, #0]
 800580c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005814:	2301      	movs	r3, #1
 8005816:	e0a3      	b.n	8005960 <_printf_i+0x1f4>
 8005818:	6820      	ldr	r0, [r4, #0]
 800581a:	6829      	ldr	r1, [r5, #0]
 800581c:	0606      	lsls	r6, r0, #24
 800581e:	f101 0304 	add.w	r3, r1, #4
 8005822:	d50a      	bpl.n	800583a <_printf_i+0xce>
 8005824:	680e      	ldr	r6, [r1, #0]
 8005826:	602b      	str	r3, [r5, #0]
 8005828:	2e00      	cmp	r6, #0
 800582a:	da03      	bge.n	8005834 <_printf_i+0xc8>
 800582c:	232d      	movs	r3, #45	; 0x2d
 800582e:	4276      	negs	r6, r6
 8005830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005834:	485e      	ldr	r0, [pc, #376]	; (80059b0 <_printf_i+0x244>)
 8005836:	230a      	movs	r3, #10
 8005838:	e019      	b.n	800586e <_printf_i+0x102>
 800583a:	680e      	ldr	r6, [r1, #0]
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005842:	bf18      	it	ne
 8005844:	b236      	sxthne	r6, r6
 8005846:	e7ef      	b.n	8005828 <_printf_i+0xbc>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	6820      	ldr	r0, [r4, #0]
 800584c:	1d19      	adds	r1, r3, #4
 800584e:	6029      	str	r1, [r5, #0]
 8005850:	0601      	lsls	r1, r0, #24
 8005852:	d501      	bpl.n	8005858 <_printf_i+0xec>
 8005854:	681e      	ldr	r6, [r3, #0]
 8005856:	e002      	b.n	800585e <_printf_i+0xf2>
 8005858:	0646      	lsls	r6, r0, #25
 800585a:	d5fb      	bpl.n	8005854 <_printf_i+0xe8>
 800585c:	881e      	ldrh	r6, [r3, #0]
 800585e:	4854      	ldr	r0, [pc, #336]	; (80059b0 <_printf_i+0x244>)
 8005860:	2f6f      	cmp	r7, #111	; 0x6f
 8005862:	bf0c      	ite	eq
 8005864:	2308      	moveq	r3, #8
 8005866:	230a      	movne	r3, #10
 8005868:	2100      	movs	r1, #0
 800586a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800586e:	6865      	ldr	r5, [r4, #4]
 8005870:	60a5      	str	r5, [r4, #8]
 8005872:	2d00      	cmp	r5, #0
 8005874:	bfa2      	ittt	ge
 8005876:	6821      	ldrge	r1, [r4, #0]
 8005878:	f021 0104 	bicge.w	r1, r1, #4
 800587c:	6021      	strge	r1, [r4, #0]
 800587e:	b90e      	cbnz	r6, 8005884 <_printf_i+0x118>
 8005880:	2d00      	cmp	r5, #0
 8005882:	d04d      	beq.n	8005920 <_printf_i+0x1b4>
 8005884:	4615      	mov	r5, r2
 8005886:	fbb6 f1f3 	udiv	r1, r6, r3
 800588a:	fb03 6711 	mls	r7, r3, r1, r6
 800588e:	5dc7      	ldrb	r7, [r0, r7]
 8005890:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005894:	4637      	mov	r7, r6
 8005896:	42bb      	cmp	r3, r7
 8005898:	460e      	mov	r6, r1
 800589a:	d9f4      	bls.n	8005886 <_printf_i+0x11a>
 800589c:	2b08      	cmp	r3, #8
 800589e:	d10b      	bne.n	80058b8 <_printf_i+0x14c>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	07de      	lsls	r6, r3, #31
 80058a4:	d508      	bpl.n	80058b8 <_printf_i+0x14c>
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	6861      	ldr	r1, [r4, #4]
 80058aa:	4299      	cmp	r1, r3
 80058ac:	bfde      	ittt	le
 80058ae:	2330      	movle	r3, #48	; 0x30
 80058b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058b8:	1b52      	subs	r2, r2, r5
 80058ba:	6122      	str	r2, [r4, #16]
 80058bc:	f8cd a000 	str.w	sl, [sp]
 80058c0:	464b      	mov	r3, r9
 80058c2:	aa03      	add	r2, sp, #12
 80058c4:	4621      	mov	r1, r4
 80058c6:	4640      	mov	r0, r8
 80058c8:	f7ff fee2 	bl	8005690 <_printf_common>
 80058cc:	3001      	adds	r0, #1
 80058ce:	d14c      	bne.n	800596a <_printf_i+0x1fe>
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295
 80058d4:	b004      	add	sp, #16
 80058d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058da:	4835      	ldr	r0, [pc, #212]	; (80059b0 <_printf_i+0x244>)
 80058dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058e0:	6829      	ldr	r1, [r5, #0]
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80058e8:	6029      	str	r1, [r5, #0]
 80058ea:	061d      	lsls	r5, r3, #24
 80058ec:	d514      	bpl.n	8005918 <_printf_i+0x1ac>
 80058ee:	07df      	lsls	r7, r3, #31
 80058f0:	bf44      	itt	mi
 80058f2:	f043 0320 	orrmi.w	r3, r3, #32
 80058f6:	6023      	strmi	r3, [r4, #0]
 80058f8:	b91e      	cbnz	r6, 8005902 <_printf_i+0x196>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	f023 0320 	bic.w	r3, r3, #32
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	2310      	movs	r3, #16
 8005904:	e7b0      	b.n	8005868 <_printf_i+0xfc>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	f043 0320 	orr.w	r3, r3, #32
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	2378      	movs	r3, #120	; 0x78
 8005910:	4828      	ldr	r0, [pc, #160]	; (80059b4 <_printf_i+0x248>)
 8005912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005916:	e7e3      	b.n	80058e0 <_printf_i+0x174>
 8005918:	0659      	lsls	r1, r3, #25
 800591a:	bf48      	it	mi
 800591c:	b2b6      	uxthmi	r6, r6
 800591e:	e7e6      	b.n	80058ee <_printf_i+0x182>
 8005920:	4615      	mov	r5, r2
 8005922:	e7bb      	b.n	800589c <_printf_i+0x130>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	6826      	ldr	r6, [r4, #0]
 8005928:	6961      	ldr	r1, [r4, #20]
 800592a:	1d18      	adds	r0, r3, #4
 800592c:	6028      	str	r0, [r5, #0]
 800592e:	0635      	lsls	r5, r6, #24
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	d501      	bpl.n	8005938 <_printf_i+0x1cc>
 8005934:	6019      	str	r1, [r3, #0]
 8005936:	e002      	b.n	800593e <_printf_i+0x1d2>
 8005938:	0670      	lsls	r0, r6, #25
 800593a:	d5fb      	bpl.n	8005934 <_printf_i+0x1c8>
 800593c:	8019      	strh	r1, [r3, #0]
 800593e:	2300      	movs	r3, #0
 8005940:	6123      	str	r3, [r4, #16]
 8005942:	4615      	mov	r5, r2
 8005944:	e7ba      	b.n	80058bc <_printf_i+0x150>
 8005946:	682b      	ldr	r3, [r5, #0]
 8005948:	1d1a      	adds	r2, r3, #4
 800594a:	602a      	str	r2, [r5, #0]
 800594c:	681d      	ldr	r5, [r3, #0]
 800594e:	6862      	ldr	r2, [r4, #4]
 8005950:	2100      	movs	r1, #0
 8005952:	4628      	mov	r0, r5
 8005954:	f7fa fc74 	bl	8000240 <memchr>
 8005958:	b108      	cbz	r0, 800595e <_printf_i+0x1f2>
 800595a:	1b40      	subs	r0, r0, r5
 800595c:	6060      	str	r0, [r4, #4]
 800595e:	6863      	ldr	r3, [r4, #4]
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	2300      	movs	r3, #0
 8005964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005968:	e7a8      	b.n	80058bc <_printf_i+0x150>
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	462a      	mov	r2, r5
 800596e:	4649      	mov	r1, r9
 8005970:	4640      	mov	r0, r8
 8005972:	47d0      	blx	sl
 8005974:	3001      	adds	r0, #1
 8005976:	d0ab      	beq.n	80058d0 <_printf_i+0x164>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	079b      	lsls	r3, r3, #30
 800597c:	d413      	bmi.n	80059a6 <_printf_i+0x23a>
 800597e:	68e0      	ldr	r0, [r4, #12]
 8005980:	9b03      	ldr	r3, [sp, #12]
 8005982:	4298      	cmp	r0, r3
 8005984:	bfb8      	it	lt
 8005986:	4618      	movlt	r0, r3
 8005988:	e7a4      	b.n	80058d4 <_printf_i+0x168>
 800598a:	2301      	movs	r3, #1
 800598c:	4632      	mov	r2, r6
 800598e:	4649      	mov	r1, r9
 8005990:	4640      	mov	r0, r8
 8005992:	47d0      	blx	sl
 8005994:	3001      	adds	r0, #1
 8005996:	d09b      	beq.n	80058d0 <_printf_i+0x164>
 8005998:	3501      	adds	r5, #1
 800599a:	68e3      	ldr	r3, [r4, #12]
 800599c:	9903      	ldr	r1, [sp, #12]
 800599e:	1a5b      	subs	r3, r3, r1
 80059a0:	42ab      	cmp	r3, r5
 80059a2:	dcf2      	bgt.n	800598a <_printf_i+0x21e>
 80059a4:	e7eb      	b.n	800597e <_printf_i+0x212>
 80059a6:	2500      	movs	r5, #0
 80059a8:	f104 0619 	add.w	r6, r4, #25
 80059ac:	e7f5      	b.n	800599a <_printf_i+0x22e>
 80059ae:	bf00      	nop
 80059b0:	080062a3 	.word	0x080062a3
 80059b4:	080062b4 	.word	0x080062b4

080059b8 <_sbrk_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4d06      	ldr	r5, [pc, #24]	; (80059d4 <_sbrk_r+0x1c>)
 80059bc:	2300      	movs	r3, #0
 80059be:	4604      	mov	r4, r0
 80059c0:	4608      	mov	r0, r1
 80059c2:	602b      	str	r3, [r5, #0]
 80059c4:	f7fb fb06 	bl	8000fd4 <_sbrk>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d102      	bne.n	80059d2 <_sbrk_r+0x1a>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	b103      	cbz	r3, 80059d2 <_sbrk_r+0x1a>
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	20008ab8 	.word	0x20008ab8

080059d8 <__swbuf_r>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	460e      	mov	r6, r1
 80059dc:	4614      	mov	r4, r2
 80059de:	4605      	mov	r5, r0
 80059e0:	b118      	cbz	r0, 80059ea <__swbuf_r+0x12>
 80059e2:	6983      	ldr	r3, [r0, #24]
 80059e4:	b90b      	cbnz	r3, 80059ea <__swbuf_r+0x12>
 80059e6:	f000 f9d9 	bl	8005d9c <__sinit>
 80059ea:	4b21      	ldr	r3, [pc, #132]	; (8005a70 <__swbuf_r+0x98>)
 80059ec:	429c      	cmp	r4, r3
 80059ee:	d12b      	bne.n	8005a48 <__swbuf_r+0x70>
 80059f0:	686c      	ldr	r4, [r5, #4]
 80059f2:	69a3      	ldr	r3, [r4, #24]
 80059f4:	60a3      	str	r3, [r4, #8]
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	071a      	lsls	r2, r3, #28
 80059fa:	d52f      	bpl.n	8005a5c <__swbuf_r+0x84>
 80059fc:	6923      	ldr	r3, [r4, #16]
 80059fe:	b36b      	cbz	r3, 8005a5c <__swbuf_r+0x84>
 8005a00:	6923      	ldr	r3, [r4, #16]
 8005a02:	6820      	ldr	r0, [r4, #0]
 8005a04:	1ac0      	subs	r0, r0, r3
 8005a06:	6963      	ldr	r3, [r4, #20]
 8005a08:	b2f6      	uxtb	r6, r6
 8005a0a:	4283      	cmp	r3, r0
 8005a0c:	4637      	mov	r7, r6
 8005a0e:	dc04      	bgt.n	8005a1a <__swbuf_r+0x42>
 8005a10:	4621      	mov	r1, r4
 8005a12:	4628      	mov	r0, r5
 8005a14:	f000 f92e 	bl	8005c74 <_fflush_r>
 8005a18:	bb30      	cbnz	r0, 8005a68 <__swbuf_r+0x90>
 8005a1a:	68a3      	ldr	r3, [r4, #8]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	60a3      	str	r3, [r4, #8]
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	6022      	str	r2, [r4, #0]
 8005a26:	701e      	strb	r6, [r3, #0]
 8005a28:	6963      	ldr	r3, [r4, #20]
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	4283      	cmp	r3, r0
 8005a2e:	d004      	beq.n	8005a3a <__swbuf_r+0x62>
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	07db      	lsls	r3, r3, #31
 8005a34:	d506      	bpl.n	8005a44 <__swbuf_r+0x6c>
 8005a36:	2e0a      	cmp	r6, #10
 8005a38:	d104      	bne.n	8005a44 <__swbuf_r+0x6c>
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f000 f919 	bl	8005c74 <_fflush_r>
 8005a42:	b988      	cbnz	r0, 8005a68 <__swbuf_r+0x90>
 8005a44:	4638      	mov	r0, r7
 8005a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <__swbuf_r+0x9c>)
 8005a4a:	429c      	cmp	r4, r3
 8005a4c:	d101      	bne.n	8005a52 <__swbuf_r+0x7a>
 8005a4e:	68ac      	ldr	r4, [r5, #8]
 8005a50:	e7cf      	b.n	80059f2 <__swbuf_r+0x1a>
 8005a52:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <__swbuf_r+0xa0>)
 8005a54:	429c      	cmp	r4, r3
 8005a56:	bf08      	it	eq
 8005a58:	68ec      	ldreq	r4, [r5, #12]
 8005a5a:	e7ca      	b.n	80059f2 <__swbuf_r+0x1a>
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f000 f80c 	bl	8005a7c <__swsetup_r>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d0cb      	beq.n	8005a00 <__swbuf_r+0x28>
 8005a68:	f04f 37ff 	mov.w	r7, #4294967295
 8005a6c:	e7ea      	b.n	8005a44 <__swbuf_r+0x6c>
 8005a6e:	bf00      	nop
 8005a70:	080062e8 	.word	0x080062e8
 8005a74:	08006308 	.word	0x08006308
 8005a78:	080062c8 	.word	0x080062c8

08005a7c <__swsetup_r>:
 8005a7c:	4b32      	ldr	r3, [pc, #200]	; (8005b48 <__swsetup_r+0xcc>)
 8005a7e:	b570      	push	{r4, r5, r6, lr}
 8005a80:	681d      	ldr	r5, [r3, #0]
 8005a82:	4606      	mov	r6, r0
 8005a84:	460c      	mov	r4, r1
 8005a86:	b125      	cbz	r5, 8005a92 <__swsetup_r+0x16>
 8005a88:	69ab      	ldr	r3, [r5, #24]
 8005a8a:	b913      	cbnz	r3, 8005a92 <__swsetup_r+0x16>
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f000 f985 	bl	8005d9c <__sinit>
 8005a92:	4b2e      	ldr	r3, [pc, #184]	; (8005b4c <__swsetup_r+0xd0>)
 8005a94:	429c      	cmp	r4, r3
 8005a96:	d10f      	bne.n	8005ab8 <__swsetup_r+0x3c>
 8005a98:	686c      	ldr	r4, [r5, #4]
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005aa0:	0719      	lsls	r1, r3, #28
 8005aa2:	d42c      	bmi.n	8005afe <__swsetup_r+0x82>
 8005aa4:	06dd      	lsls	r5, r3, #27
 8005aa6:	d411      	bmi.n	8005acc <__swsetup_r+0x50>
 8005aa8:	2309      	movs	r3, #9
 8005aaa:	6033      	str	r3, [r6, #0]
 8005aac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ab0:	81a3      	strh	r3, [r4, #12]
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab6:	e03e      	b.n	8005b36 <__swsetup_r+0xba>
 8005ab8:	4b25      	ldr	r3, [pc, #148]	; (8005b50 <__swsetup_r+0xd4>)
 8005aba:	429c      	cmp	r4, r3
 8005abc:	d101      	bne.n	8005ac2 <__swsetup_r+0x46>
 8005abe:	68ac      	ldr	r4, [r5, #8]
 8005ac0:	e7eb      	b.n	8005a9a <__swsetup_r+0x1e>
 8005ac2:	4b24      	ldr	r3, [pc, #144]	; (8005b54 <__swsetup_r+0xd8>)
 8005ac4:	429c      	cmp	r4, r3
 8005ac6:	bf08      	it	eq
 8005ac8:	68ec      	ldreq	r4, [r5, #12]
 8005aca:	e7e6      	b.n	8005a9a <__swsetup_r+0x1e>
 8005acc:	0758      	lsls	r0, r3, #29
 8005ace:	d512      	bpl.n	8005af6 <__swsetup_r+0x7a>
 8005ad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ad2:	b141      	cbz	r1, 8005ae6 <__swsetup_r+0x6a>
 8005ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	d002      	beq.n	8005ae2 <__swsetup_r+0x66>
 8005adc:	4630      	mov	r0, r6
 8005ade:	f7ff fb9d 	bl	800521c <_free_r>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005aec:	81a3      	strh	r3, [r4, #12]
 8005aee:	2300      	movs	r3, #0
 8005af0:	6063      	str	r3, [r4, #4]
 8005af2:	6923      	ldr	r3, [r4, #16]
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	f043 0308 	orr.w	r3, r3, #8
 8005afc:	81a3      	strh	r3, [r4, #12]
 8005afe:	6923      	ldr	r3, [r4, #16]
 8005b00:	b94b      	cbnz	r3, 8005b16 <__swsetup_r+0x9a>
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b0c:	d003      	beq.n	8005b16 <__swsetup_r+0x9a>
 8005b0e:	4621      	mov	r1, r4
 8005b10:	4630      	mov	r0, r6
 8005b12:	f000 fa09 	bl	8005f28 <__smakebuf_r>
 8005b16:	89a0      	ldrh	r0, [r4, #12]
 8005b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b1c:	f010 0301 	ands.w	r3, r0, #1
 8005b20:	d00a      	beq.n	8005b38 <__swsetup_r+0xbc>
 8005b22:	2300      	movs	r3, #0
 8005b24:	60a3      	str	r3, [r4, #8]
 8005b26:	6963      	ldr	r3, [r4, #20]
 8005b28:	425b      	negs	r3, r3
 8005b2a:	61a3      	str	r3, [r4, #24]
 8005b2c:	6923      	ldr	r3, [r4, #16]
 8005b2e:	b943      	cbnz	r3, 8005b42 <__swsetup_r+0xc6>
 8005b30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b34:	d1ba      	bne.n	8005aac <__swsetup_r+0x30>
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	0781      	lsls	r1, r0, #30
 8005b3a:	bf58      	it	pl
 8005b3c:	6963      	ldrpl	r3, [r4, #20]
 8005b3e:	60a3      	str	r3, [r4, #8]
 8005b40:	e7f4      	b.n	8005b2c <__swsetup_r+0xb0>
 8005b42:	2000      	movs	r0, #0
 8005b44:	e7f7      	b.n	8005b36 <__swsetup_r+0xba>
 8005b46:	bf00      	nop
 8005b48:	2000000c 	.word	0x2000000c
 8005b4c:	080062e8 	.word	0x080062e8
 8005b50:	08006308 	.word	0x08006308
 8005b54:	080062c8 	.word	0x080062c8

08005b58 <abort>:
 8005b58:	b508      	push	{r3, lr}
 8005b5a:	2006      	movs	r0, #6
 8005b5c:	f000 fa58 	bl	8006010 <raise>
 8005b60:	2001      	movs	r0, #1
 8005b62:	f7fb f9bf 	bl	8000ee4 <_exit>
	...

08005b68 <__sflush_r>:
 8005b68:	898a      	ldrh	r2, [r1, #12]
 8005b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6e:	4605      	mov	r5, r0
 8005b70:	0710      	lsls	r0, r2, #28
 8005b72:	460c      	mov	r4, r1
 8005b74:	d458      	bmi.n	8005c28 <__sflush_r+0xc0>
 8005b76:	684b      	ldr	r3, [r1, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	dc05      	bgt.n	8005b88 <__sflush_r+0x20>
 8005b7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	dc02      	bgt.n	8005b88 <__sflush_r+0x20>
 8005b82:	2000      	movs	r0, #0
 8005b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b8a:	2e00      	cmp	r6, #0
 8005b8c:	d0f9      	beq.n	8005b82 <__sflush_r+0x1a>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b94:	682f      	ldr	r7, [r5, #0]
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	d032      	beq.n	8005c00 <__sflush_r+0x98>
 8005b9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	075a      	lsls	r2, r3, #29
 8005ba0:	d505      	bpl.n	8005bae <__sflush_r+0x46>
 8005ba2:	6863      	ldr	r3, [r4, #4]
 8005ba4:	1ac0      	subs	r0, r0, r3
 8005ba6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ba8:	b10b      	cbz	r3, 8005bae <__sflush_r+0x46>
 8005baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bac:	1ac0      	subs	r0, r0, r3
 8005bae:	2300      	movs	r3, #0
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bb4:	6a21      	ldr	r1, [r4, #32]
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b0      	blx	r6
 8005bba:	1c43      	adds	r3, r0, #1
 8005bbc:	89a3      	ldrh	r3, [r4, #12]
 8005bbe:	d106      	bne.n	8005bce <__sflush_r+0x66>
 8005bc0:	6829      	ldr	r1, [r5, #0]
 8005bc2:	291d      	cmp	r1, #29
 8005bc4:	d82c      	bhi.n	8005c20 <__sflush_r+0xb8>
 8005bc6:	4a2a      	ldr	r2, [pc, #168]	; (8005c70 <__sflush_r+0x108>)
 8005bc8:	40ca      	lsrs	r2, r1
 8005bca:	07d6      	lsls	r6, r2, #31
 8005bcc:	d528      	bpl.n	8005c20 <__sflush_r+0xb8>
 8005bce:	2200      	movs	r2, #0
 8005bd0:	6062      	str	r2, [r4, #4]
 8005bd2:	04d9      	lsls	r1, r3, #19
 8005bd4:	6922      	ldr	r2, [r4, #16]
 8005bd6:	6022      	str	r2, [r4, #0]
 8005bd8:	d504      	bpl.n	8005be4 <__sflush_r+0x7c>
 8005bda:	1c42      	adds	r2, r0, #1
 8005bdc:	d101      	bne.n	8005be2 <__sflush_r+0x7a>
 8005bde:	682b      	ldr	r3, [r5, #0]
 8005be0:	b903      	cbnz	r3, 8005be4 <__sflush_r+0x7c>
 8005be2:	6560      	str	r0, [r4, #84]	; 0x54
 8005be4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005be6:	602f      	str	r7, [r5, #0]
 8005be8:	2900      	cmp	r1, #0
 8005bea:	d0ca      	beq.n	8005b82 <__sflush_r+0x1a>
 8005bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bf0:	4299      	cmp	r1, r3
 8005bf2:	d002      	beq.n	8005bfa <__sflush_r+0x92>
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f7ff fb11 	bl	800521c <_free_r>
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	6360      	str	r0, [r4, #52]	; 0x34
 8005bfe:	e7c1      	b.n	8005b84 <__sflush_r+0x1c>
 8005c00:	6a21      	ldr	r1, [r4, #32]
 8005c02:	2301      	movs	r3, #1
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b0      	blx	r6
 8005c08:	1c41      	adds	r1, r0, #1
 8005c0a:	d1c7      	bne.n	8005b9c <__sflush_r+0x34>
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0c4      	beq.n	8005b9c <__sflush_r+0x34>
 8005c12:	2b1d      	cmp	r3, #29
 8005c14:	d001      	beq.n	8005c1a <__sflush_r+0xb2>
 8005c16:	2b16      	cmp	r3, #22
 8005c18:	d101      	bne.n	8005c1e <__sflush_r+0xb6>
 8005c1a:	602f      	str	r7, [r5, #0]
 8005c1c:	e7b1      	b.n	8005b82 <__sflush_r+0x1a>
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c24:	81a3      	strh	r3, [r4, #12]
 8005c26:	e7ad      	b.n	8005b84 <__sflush_r+0x1c>
 8005c28:	690f      	ldr	r7, [r1, #16]
 8005c2a:	2f00      	cmp	r7, #0
 8005c2c:	d0a9      	beq.n	8005b82 <__sflush_r+0x1a>
 8005c2e:	0793      	lsls	r3, r2, #30
 8005c30:	680e      	ldr	r6, [r1, #0]
 8005c32:	bf08      	it	eq
 8005c34:	694b      	ldreq	r3, [r1, #20]
 8005c36:	600f      	str	r7, [r1, #0]
 8005c38:	bf18      	it	ne
 8005c3a:	2300      	movne	r3, #0
 8005c3c:	eba6 0807 	sub.w	r8, r6, r7
 8005c40:	608b      	str	r3, [r1, #8]
 8005c42:	f1b8 0f00 	cmp.w	r8, #0
 8005c46:	dd9c      	ble.n	8005b82 <__sflush_r+0x1a>
 8005c48:	6a21      	ldr	r1, [r4, #32]
 8005c4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c4c:	4643      	mov	r3, r8
 8005c4e:	463a      	mov	r2, r7
 8005c50:	4628      	mov	r0, r5
 8005c52:	47b0      	blx	r6
 8005c54:	2800      	cmp	r0, #0
 8005c56:	dc06      	bgt.n	8005c66 <__sflush_r+0xfe>
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c5e:	81a3      	strh	r3, [r4, #12]
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	e78e      	b.n	8005b84 <__sflush_r+0x1c>
 8005c66:	4407      	add	r7, r0
 8005c68:	eba8 0800 	sub.w	r8, r8, r0
 8005c6c:	e7e9      	b.n	8005c42 <__sflush_r+0xda>
 8005c6e:	bf00      	nop
 8005c70:	20400001 	.word	0x20400001

08005c74 <_fflush_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	690b      	ldr	r3, [r1, #16]
 8005c78:	4605      	mov	r5, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	b913      	cbnz	r3, 8005c84 <_fflush_r+0x10>
 8005c7e:	2500      	movs	r5, #0
 8005c80:	4628      	mov	r0, r5
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	b118      	cbz	r0, 8005c8e <_fflush_r+0x1a>
 8005c86:	6983      	ldr	r3, [r0, #24]
 8005c88:	b90b      	cbnz	r3, 8005c8e <_fflush_r+0x1a>
 8005c8a:	f000 f887 	bl	8005d9c <__sinit>
 8005c8e:	4b14      	ldr	r3, [pc, #80]	; (8005ce0 <_fflush_r+0x6c>)
 8005c90:	429c      	cmp	r4, r3
 8005c92:	d11b      	bne.n	8005ccc <_fflush_r+0x58>
 8005c94:	686c      	ldr	r4, [r5, #4]
 8005c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0ef      	beq.n	8005c7e <_fflush_r+0xa>
 8005c9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ca0:	07d0      	lsls	r0, r2, #31
 8005ca2:	d404      	bmi.n	8005cae <_fflush_r+0x3a>
 8005ca4:	0599      	lsls	r1, r3, #22
 8005ca6:	d402      	bmi.n	8005cae <_fflush_r+0x3a>
 8005ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005caa:	f000 f915 	bl	8005ed8 <__retarget_lock_acquire_recursive>
 8005cae:	4628      	mov	r0, r5
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	f7ff ff59 	bl	8005b68 <__sflush_r>
 8005cb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cb8:	07da      	lsls	r2, r3, #31
 8005cba:	4605      	mov	r5, r0
 8005cbc:	d4e0      	bmi.n	8005c80 <_fflush_r+0xc>
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	059b      	lsls	r3, r3, #22
 8005cc2:	d4dd      	bmi.n	8005c80 <_fflush_r+0xc>
 8005cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cc6:	f000 f908 	bl	8005eda <__retarget_lock_release_recursive>
 8005cca:	e7d9      	b.n	8005c80 <_fflush_r+0xc>
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <_fflush_r+0x70>)
 8005cce:	429c      	cmp	r4, r3
 8005cd0:	d101      	bne.n	8005cd6 <_fflush_r+0x62>
 8005cd2:	68ac      	ldr	r4, [r5, #8]
 8005cd4:	e7df      	b.n	8005c96 <_fflush_r+0x22>
 8005cd6:	4b04      	ldr	r3, [pc, #16]	; (8005ce8 <_fflush_r+0x74>)
 8005cd8:	429c      	cmp	r4, r3
 8005cda:	bf08      	it	eq
 8005cdc:	68ec      	ldreq	r4, [r5, #12]
 8005cde:	e7da      	b.n	8005c96 <_fflush_r+0x22>
 8005ce0:	080062e8 	.word	0x080062e8
 8005ce4:	08006308 	.word	0x08006308
 8005ce8:	080062c8 	.word	0x080062c8

08005cec <std>:
 8005cec:	2300      	movs	r3, #0
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8005cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cfa:	6083      	str	r3, [r0, #8]
 8005cfc:	8181      	strh	r1, [r0, #12]
 8005cfe:	6643      	str	r3, [r0, #100]	; 0x64
 8005d00:	81c2      	strh	r2, [r0, #14]
 8005d02:	6183      	str	r3, [r0, #24]
 8005d04:	4619      	mov	r1, r3
 8005d06:	2208      	movs	r2, #8
 8005d08:	305c      	adds	r0, #92	; 0x5c
 8005d0a:	f7ff f9af 	bl	800506c <memset>
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <std+0x38>)
 8005d10:	6263      	str	r3, [r4, #36]	; 0x24
 8005d12:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <std+0x3c>)
 8005d14:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d16:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <std+0x40>)
 8005d18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d1a:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <std+0x44>)
 8005d1c:	6224      	str	r4, [r4, #32]
 8005d1e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d20:	bd10      	pop	{r4, pc}
 8005d22:	bf00      	nop
 8005d24:	08006049 	.word	0x08006049
 8005d28:	0800606b 	.word	0x0800606b
 8005d2c:	080060a3 	.word	0x080060a3
 8005d30:	080060c7 	.word	0x080060c7

08005d34 <_cleanup_r>:
 8005d34:	4901      	ldr	r1, [pc, #4]	; (8005d3c <_cleanup_r+0x8>)
 8005d36:	f000 b8af 	b.w	8005e98 <_fwalk_reent>
 8005d3a:	bf00      	nop
 8005d3c:	08005c75 	.word	0x08005c75

08005d40 <__sfmoreglue>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	2268      	movs	r2, #104	; 0x68
 8005d44:	1e4d      	subs	r5, r1, #1
 8005d46:	4355      	muls	r5, r2
 8005d48:	460e      	mov	r6, r1
 8005d4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d4e:	f7ff fad1 	bl	80052f4 <_malloc_r>
 8005d52:	4604      	mov	r4, r0
 8005d54:	b140      	cbz	r0, 8005d68 <__sfmoreglue+0x28>
 8005d56:	2100      	movs	r1, #0
 8005d58:	e9c0 1600 	strd	r1, r6, [r0]
 8005d5c:	300c      	adds	r0, #12
 8005d5e:	60a0      	str	r0, [r4, #8]
 8005d60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d64:	f7ff f982 	bl	800506c <memset>
 8005d68:	4620      	mov	r0, r4
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}

08005d6c <__sfp_lock_acquire>:
 8005d6c:	4801      	ldr	r0, [pc, #4]	; (8005d74 <__sfp_lock_acquire+0x8>)
 8005d6e:	f000 b8b3 	b.w	8005ed8 <__retarget_lock_acquire_recursive>
 8005d72:	bf00      	nop
 8005d74:	20008abd 	.word	0x20008abd

08005d78 <__sfp_lock_release>:
 8005d78:	4801      	ldr	r0, [pc, #4]	; (8005d80 <__sfp_lock_release+0x8>)
 8005d7a:	f000 b8ae 	b.w	8005eda <__retarget_lock_release_recursive>
 8005d7e:	bf00      	nop
 8005d80:	20008abd 	.word	0x20008abd

08005d84 <__sinit_lock_acquire>:
 8005d84:	4801      	ldr	r0, [pc, #4]	; (8005d8c <__sinit_lock_acquire+0x8>)
 8005d86:	f000 b8a7 	b.w	8005ed8 <__retarget_lock_acquire_recursive>
 8005d8a:	bf00      	nop
 8005d8c:	20008abe 	.word	0x20008abe

08005d90 <__sinit_lock_release>:
 8005d90:	4801      	ldr	r0, [pc, #4]	; (8005d98 <__sinit_lock_release+0x8>)
 8005d92:	f000 b8a2 	b.w	8005eda <__retarget_lock_release_recursive>
 8005d96:	bf00      	nop
 8005d98:	20008abe 	.word	0x20008abe

08005d9c <__sinit>:
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	4604      	mov	r4, r0
 8005da0:	f7ff fff0 	bl	8005d84 <__sinit_lock_acquire>
 8005da4:	69a3      	ldr	r3, [r4, #24]
 8005da6:	b11b      	cbz	r3, 8005db0 <__sinit+0x14>
 8005da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dac:	f7ff bff0 	b.w	8005d90 <__sinit_lock_release>
 8005db0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005db4:	6523      	str	r3, [r4, #80]	; 0x50
 8005db6:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <__sinit+0x68>)
 8005db8:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <__sinit+0x6c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005dbe:	42a3      	cmp	r3, r4
 8005dc0:	bf04      	itt	eq
 8005dc2:	2301      	moveq	r3, #1
 8005dc4:	61a3      	streq	r3, [r4, #24]
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f000 f820 	bl	8005e0c <__sfp>
 8005dcc:	6060      	str	r0, [r4, #4]
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f000 f81c 	bl	8005e0c <__sfp>
 8005dd4:	60a0      	str	r0, [r4, #8]
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f000 f818 	bl	8005e0c <__sfp>
 8005ddc:	2200      	movs	r2, #0
 8005dde:	60e0      	str	r0, [r4, #12]
 8005de0:	2104      	movs	r1, #4
 8005de2:	6860      	ldr	r0, [r4, #4]
 8005de4:	f7ff ff82 	bl	8005cec <std>
 8005de8:	68a0      	ldr	r0, [r4, #8]
 8005dea:	2201      	movs	r2, #1
 8005dec:	2109      	movs	r1, #9
 8005dee:	f7ff ff7d 	bl	8005cec <std>
 8005df2:	68e0      	ldr	r0, [r4, #12]
 8005df4:	2202      	movs	r2, #2
 8005df6:	2112      	movs	r1, #18
 8005df8:	f7ff ff78 	bl	8005cec <std>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	61a3      	str	r3, [r4, #24]
 8005e00:	e7d2      	b.n	8005da8 <__sinit+0xc>
 8005e02:	bf00      	nop
 8005e04:	080061e0 	.word	0x080061e0
 8005e08:	08005d35 	.word	0x08005d35

08005e0c <__sfp>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	4607      	mov	r7, r0
 8005e10:	f7ff ffac 	bl	8005d6c <__sfp_lock_acquire>
 8005e14:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <__sfp+0x84>)
 8005e16:	681e      	ldr	r6, [r3, #0]
 8005e18:	69b3      	ldr	r3, [r6, #24]
 8005e1a:	b913      	cbnz	r3, 8005e22 <__sfp+0x16>
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f7ff ffbd 	bl	8005d9c <__sinit>
 8005e22:	3648      	adds	r6, #72	; 0x48
 8005e24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	d503      	bpl.n	8005e34 <__sfp+0x28>
 8005e2c:	6833      	ldr	r3, [r6, #0]
 8005e2e:	b30b      	cbz	r3, 8005e74 <__sfp+0x68>
 8005e30:	6836      	ldr	r6, [r6, #0]
 8005e32:	e7f7      	b.n	8005e24 <__sfp+0x18>
 8005e34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e38:	b9d5      	cbnz	r5, 8005e70 <__sfp+0x64>
 8005e3a:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <__sfp+0x88>)
 8005e3c:	60e3      	str	r3, [r4, #12]
 8005e3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e42:	6665      	str	r5, [r4, #100]	; 0x64
 8005e44:	f000 f847 	bl	8005ed6 <__retarget_lock_init_recursive>
 8005e48:	f7ff ff96 	bl	8005d78 <__sfp_lock_release>
 8005e4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e54:	6025      	str	r5, [r4, #0]
 8005e56:	61a5      	str	r5, [r4, #24]
 8005e58:	2208      	movs	r2, #8
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e60:	f7ff f904 	bl	800506c <memset>
 8005e64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e70:	3468      	adds	r4, #104	; 0x68
 8005e72:	e7d9      	b.n	8005e28 <__sfp+0x1c>
 8005e74:	2104      	movs	r1, #4
 8005e76:	4638      	mov	r0, r7
 8005e78:	f7ff ff62 	bl	8005d40 <__sfmoreglue>
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	6030      	str	r0, [r6, #0]
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d1d5      	bne.n	8005e30 <__sfp+0x24>
 8005e84:	f7ff ff78 	bl	8005d78 <__sfp_lock_release>
 8005e88:	230c      	movs	r3, #12
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	e7ee      	b.n	8005e6c <__sfp+0x60>
 8005e8e:	bf00      	nop
 8005e90:	080061e0 	.word	0x080061e0
 8005e94:	ffff0001 	.word	0xffff0001

08005e98 <_fwalk_reent>:
 8005e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	4688      	mov	r8, r1
 8005ea0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ea4:	2700      	movs	r7, #0
 8005ea6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005eaa:	f1b9 0901 	subs.w	r9, r9, #1
 8005eae:	d505      	bpl.n	8005ebc <_fwalk_reent+0x24>
 8005eb0:	6824      	ldr	r4, [r4, #0]
 8005eb2:	2c00      	cmp	r4, #0
 8005eb4:	d1f7      	bne.n	8005ea6 <_fwalk_reent+0xe>
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ebc:	89ab      	ldrh	r3, [r5, #12]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d907      	bls.n	8005ed2 <_fwalk_reent+0x3a>
 8005ec2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	d003      	beq.n	8005ed2 <_fwalk_reent+0x3a>
 8005eca:	4629      	mov	r1, r5
 8005ecc:	4630      	mov	r0, r6
 8005ece:	47c0      	blx	r8
 8005ed0:	4307      	orrs	r7, r0
 8005ed2:	3568      	adds	r5, #104	; 0x68
 8005ed4:	e7e9      	b.n	8005eaa <_fwalk_reent+0x12>

08005ed6 <__retarget_lock_init_recursive>:
 8005ed6:	4770      	bx	lr

08005ed8 <__retarget_lock_acquire_recursive>:
 8005ed8:	4770      	bx	lr

08005eda <__retarget_lock_release_recursive>:
 8005eda:	4770      	bx	lr

08005edc <__swhatbuf_r>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	460e      	mov	r6, r1
 8005ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee4:	2900      	cmp	r1, #0
 8005ee6:	b096      	sub	sp, #88	; 0x58
 8005ee8:	4614      	mov	r4, r2
 8005eea:	461d      	mov	r5, r3
 8005eec:	da08      	bge.n	8005f00 <__swhatbuf_r+0x24>
 8005eee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	602a      	str	r2, [r5, #0]
 8005ef6:	061a      	lsls	r2, r3, #24
 8005ef8:	d410      	bmi.n	8005f1c <__swhatbuf_r+0x40>
 8005efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005efe:	e00e      	b.n	8005f1e <__swhatbuf_r+0x42>
 8005f00:	466a      	mov	r2, sp
 8005f02:	f000 f907 	bl	8006114 <_fstat_r>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	dbf1      	blt.n	8005eee <__swhatbuf_r+0x12>
 8005f0a:	9a01      	ldr	r2, [sp, #4]
 8005f0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f14:	425a      	negs	r2, r3
 8005f16:	415a      	adcs	r2, r3
 8005f18:	602a      	str	r2, [r5, #0]
 8005f1a:	e7ee      	b.n	8005efa <__swhatbuf_r+0x1e>
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	2000      	movs	r0, #0
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	b016      	add	sp, #88	; 0x58
 8005f24:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f28 <__smakebuf_r>:
 8005f28:	898b      	ldrh	r3, [r1, #12]
 8005f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f2c:	079d      	lsls	r5, r3, #30
 8005f2e:	4606      	mov	r6, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	d507      	bpl.n	8005f44 <__smakebuf_r+0x1c>
 8005f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	6123      	str	r3, [r4, #16]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	6163      	str	r3, [r4, #20]
 8005f40:	b002      	add	sp, #8
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	ab01      	add	r3, sp, #4
 8005f46:	466a      	mov	r2, sp
 8005f48:	f7ff ffc8 	bl	8005edc <__swhatbuf_r>
 8005f4c:	9900      	ldr	r1, [sp, #0]
 8005f4e:	4605      	mov	r5, r0
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7ff f9cf 	bl	80052f4 <_malloc_r>
 8005f56:	b948      	cbnz	r0, 8005f6c <__smakebuf_r+0x44>
 8005f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f5c:	059a      	lsls	r2, r3, #22
 8005f5e:	d4ef      	bmi.n	8005f40 <__smakebuf_r+0x18>
 8005f60:	f023 0303 	bic.w	r3, r3, #3
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	81a3      	strh	r3, [r4, #12]
 8005f6a:	e7e3      	b.n	8005f34 <__smakebuf_r+0xc>
 8005f6c:	4b0d      	ldr	r3, [pc, #52]	; (8005fa4 <__smakebuf_r+0x7c>)
 8005f6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	6020      	str	r0, [r4, #0]
 8005f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f78:	81a3      	strh	r3, [r4, #12]
 8005f7a:	9b00      	ldr	r3, [sp, #0]
 8005f7c:	6163      	str	r3, [r4, #20]
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	6120      	str	r0, [r4, #16]
 8005f82:	b15b      	cbz	r3, 8005f9c <__smakebuf_r+0x74>
 8005f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f000 f8d5 	bl	8006138 <_isatty_r>
 8005f8e:	b128      	cbz	r0, 8005f9c <__smakebuf_r+0x74>
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	f023 0303 	bic.w	r3, r3, #3
 8005f96:	f043 0301 	orr.w	r3, r3, #1
 8005f9a:	81a3      	strh	r3, [r4, #12]
 8005f9c:	89a0      	ldrh	r0, [r4, #12]
 8005f9e:	4305      	orrs	r5, r0
 8005fa0:	81a5      	strh	r5, [r4, #12]
 8005fa2:	e7cd      	b.n	8005f40 <__smakebuf_r+0x18>
 8005fa4:	08005d35 	.word	0x08005d35

08005fa8 <__malloc_lock>:
 8005fa8:	4801      	ldr	r0, [pc, #4]	; (8005fb0 <__malloc_lock+0x8>)
 8005faa:	f7ff bf95 	b.w	8005ed8 <__retarget_lock_acquire_recursive>
 8005fae:	bf00      	nop
 8005fb0:	20008abc 	.word	0x20008abc

08005fb4 <__malloc_unlock>:
 8005fb4:	4801      	ldr	r0, [pc, #4]	; (8005fbc <__malloc_unlock+0x8>)
 8005fb6:	f7ff bf90 	b.w	8005eda <__retarget_lock_release_recursive>
 8005fba:	bf00      	nop
 8005fbc:	20008abc 	.word	0x20008abc

08005fc0 <_raise_r>:
 8005fc0:	291f      	cmp	r1, #31
 8005fc2:	b538      	push	{r3, r4, r5, lr}
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	460d      	mov	r5, r1
 8005fc8:	d904      	bls.n	8005fd4 <_raise_r+0x14>
 8005fca:	2316      	movs	r3, #22
 8005fcc:	6003      	str	r3, [r0, #0]
 8005fce:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005fd6:	b112      	cbz	r2, 8005fde <_raise_r+0x1e>
 8005fd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fdc:	b94b      	cbnz	r3, 8005ff2 <_raise_r+0x32>
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f000 f830 	bl	8006044 <_getpid_r>
 8005fe4:	462a      	mov	r2, r5
 8005fe6:	4601      	mov	r1, r0
 8005fe8:	4620      	mov	r0, r4
 8005fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fee:	f000 b817 	b.w	8006020 <_kill_r>
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d00a      	beq.n	800600c <_raise_r+0x4c>
 8005ff6:	1c59      	adds	r1, r3, #1
 8005ff8:	d103      	bne.n	8006002 <_raise_r+0x42>
 8005ffa:	2316      	movs	r3, #22
 8005ffc:	6003      	str	r3, [r0, #0]
 8005ffe:	2001      	movs	r0, #1
 8006000:	e7e7      	b.n	8005fd2 <_raise_r+0x12>
 8006002:	2400      	movs	r4, #0
 8006004:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006008:	4628      	mov	r0, r5
 800600a:	4798      	blx	r3
 800600c:	2000      	movs	r0, #0
 800600e:	e7e0      	b.n	8005fd2 <_raise_r+0x12>

08006010 <raise>:
 8006010:	4b02      	ldr	r3, [pc, #8]	; (800601c <raise+0xc>)
 8006012:	4601      	mov	r1, r0
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	f7ff bfd3 	b.w	8005fc0 <_raise_r>
 800601a:	bf00      	nop
 800601c:	2000000c 	.word	0x2000000c

08006020 <_kill_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4d07      	ldr	r5, [pc, #28]	; (8006040 <_kill_r+0x20>)
 8006024:	2300      	movs	r3, #0
 8006026:	4604      	mov	r4, r0
 8006028:	4608      	mov	r0, r1
 800602a:	4611      	mov	r1, r2
 800602c:	602b      	str	r3, [r5, #0]
 800602e:	f7fa ff49 	bl	8000ec4 <_kill>
 8006032:	1c43      	adds	r3, r0, #1
 8006034:	d102      	bne.n	800603c <_kill_r+0x1c>
 8006036:	682b      	ldr	r3, [r5, #0]
 8006038:	b103      	cbz	r3, 800603c <_kill_r+0x1c>
 800603a:	6023      	str	r3, [r4, #0]
 800603c:	bd38      	pop	{r3, r4, r5, pc}
 800603e:	bf00      	nop
 8006040:	20008ab8 	.word	0x20008ab8

08006044 <_getpid_r>:
 8006044:	f7fa bf36 	b.w	8000eb4 <_getpid>

08006048 <__sread>:
 8006048:	b510      	push	{r4, lr}
 800604a:	460c      	mov	r4, r1
 800604c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006050:	f000 f894 	bl	800617c <_read_r>
 8006054:	2800      	cmp	r0, #0
 8006056:	bfab      	itete	ge
 8006058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800605a:	89a3      	ldrhlt	r3, [r4, #12]
 800605c:	181b      	addge	r3, r3, r0
 800605e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006062:	bfac      	ite	ge
 8006064:	6563      	strge	r3, [r4, #84]	; 0x54
 8006066:	81a3      	strhlt	r3, [r4, #12]
 8006068:	bd10      	pop	{r4, pc}

0800606a <__swrite>:
 800606a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606e:	461f      	mov	r7, r3
 8006070:	898b      	ldrh	r3, [r1, #12]
 8006072:	05db      	lsls	r3, r3, #23
 8006074:	4605      	mov	r5, r0
 8006076:	460c      	mov	r4, r1
 8006078:	4616      	mov	r6, r2
 800607a:	d505      	bpl.n	8006088 <__swrite+0x1e>
 800607c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006080:	2302      	movs	r3, #2
 8006082:	2200      	movs	r2, #0
 8006084:	f000 f868 	bl	8006158 <_lseek_r>
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800608e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006092:	81a3      	strh	r3, [r4, #12]
 8006094:	4632      	mov	r2, r6
 8006096:	463b      	mov	r3, r7
 8006098:	4628      	mov	r0, r5
 800609a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800609e:	f000 b817 	b.w	80060d0 <_write_r>

080060a2 <__sseek>:
 80060a2:	b510      	push	{r4, lr}
 80060a4:	460c      	mov	r4, r1
 80060a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060aa:	f000 f855 	bl	8006158 <_lseek_r>
 80060ae:	1c43      	adds	r3, r0, #1
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	bf15      	itete	ne
 80060b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80060b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060be:	81a3      	strheq	r3, [r4, #12]
 80060c0:	bf18      	it	ne
 80060c2:	81a3      	strhne	r3, [r4, #12]
 80060c4:	bd10      	pop	{r4, pc}

080060c6 <__sclose>:
 80060c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ca:	f000 b813 	b.w	80060f4 <_close_r>
	...

080060d0 <_write_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d07      	ldr	r5, [pc, #28]	; (80060f0 <_write_r+0x20>)
 80060d4:	4604      	mov	r4, r0
 80060d6:	4608      	mov	r0, r1
 80060d8:	4611      	mov	r1, r2
 80060da:	2200      	movs	r2, #0
 80060dc:	602a      	str	r2, [r5, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	f7fa ff27 	bl	8000f32 <_write>
 80060e4:	1c43      	adds	r3, r0, #1
 80060e6:	d102      	bne.n	80060ee <_write_r+0x1e>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	b103      	cbz	r3, 80060ee <_write_r+0x1e>
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	20008ab8 	.word	0x20008ab8

080060f4 <_close_r>:
 80060f4:	b538      	push	{r3, r4, r5, lr}
 80060f6:	4d06      	ldr	r5, [pc, #24]	; (8006110 <_close_r+0x1c>)
 80060f8:	2300      	movs	r3, #0
 80060fa:	4604      	mov	r4, r0
 80060fc:	4608      	mov	r0, r1
 80060fe:	602b      	str	r3, [r5, #0]
 8006100:	f7fa ff33 	bl	8000f6a <_close>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_close_r+0x1a>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	b103      	cbz	r3, 800610e <_close_r+0x1a>
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	20008ab8 	.word	0x20008ab8

08006114 <_fstat_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d07      	ldr	r5, [pc, #28]	; (8006134 <_fstat_r+0x20>)
 8006118:	2300      	movs	r3, #0
 800611a:	4604      	mov	r4, r0
 800611c:	4608      	mov	r0, r1
 800611e:	4611      	mov	r1, r2
 8006120:	602b      	str	r3, [r5, #0]
 8006122:	f7fa ff2e 	bl	8000f82 <_fstat>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	d102      	bne.n	8006130 <_fstat_r+0x1c>
 800612a:	682b      	ldr	r3, [r5, #0]
 800612c:	b103      	cbz	r3, 8006130 <_fstat_r+0x1c>
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	bd38      	pop	{r3, r4, r5, pc}
 8006132:	bf00      	nop
 8006134:	20008ab8 	.word	0x20008ab8

08006138 <_isatty_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4d06      	ldr	r5, [pc, #24]	; (8006154 <_isatty_r+0x1c>)
 800613c:	2300      	movs	r3, #0
 800613e:	4604      	mov	r4, r0
 8006140:	4608      	mov	r0, r1
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	f7fa ff2d 	bl	8000fa2 <_isatty>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d102      	bne.n	8006152 <_isatty_r+0x1a>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	b103      	cbz	r3, 8006152 <_isatty_r+0x1a>
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	20008ab8 	.word	0x20008ab8

08006158 <_lseek_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4d07      	ldr	r5, [pc, #28]	; (8006178 <_lseek_r+0x20>)
 800615c:	4604      	mov	r4, r0
 800615e:	4608      	mov	r0, r1
 8006160:	4611      	mov	r1, r2
 8006162:	2200      	movs	r2, #0
 8006164:	602a      	str	r2, [r5, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	f7fa ff26 	bl	8000fb8 <_lseek>
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	d102      	bne.n	8006176 <_lseek_r+0x1e>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	b103      	cbz	r3, 8006176 <_lseek_r+0x1e>
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	bd38      	pop	{r3, r4, r5, pc}
 8006178:	20008ab8 	.word	0x20008ab8

0800617c <_read_r>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4d07      	ldr	r5, [pc, #28]	; (800619c <_read_r+0x20>)
 8006180:	4604      	mov	r4, r0
 8006182:	4608      	mov	r0, r1
 8006184:	4611      	mov	r1, r2
 8006186:	2200      	movs	r2, #0
 8006188:	602a      	str	r2, [r5, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	f7fa feb4 	bl	8000ef8 <_read>
 8006190:	1c43      	adds	r3, r0, #1
 8006192:	d102      	bne.n	800619a <_read_r+0x1e>
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	b103      	cbz	r3, 800619a <_read_r+0x1e>
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	bd38      	pop	{r3, r4, r5, pc}
 800619c:	20008ab8 	.word	0x20008ab8

080061a0 <_gettimeofday>:
 80061a0:	4b02      	ldr	r3, [pc, #8]	; (80061ac <_gettimeofday+0xc>)
 80061a2:	2258      	movs	r2, #88	; 0x58
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	f04f 30ff 	mov.w	r0, #4294967295
 80061aa:	4770      	bx	lr
 80061ac:	20008ab8 	.word	0x20008ab8

080061b0 <_init>:
 80061b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b2:	bf00      	nop
 80061b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b6:	bc08      	pop	{r3}
 80061b8:	469e      	mov	lr, r3
 80061ba:	4770      	bx	lr

080061bc <_fini>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	bf00      	nop
 80061c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c2:	bc08      	pop	{r3}
 80061c4:	469e      	mov	lr, r3
 80061c6:	4770      	bx	lr
